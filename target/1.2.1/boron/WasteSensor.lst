
/Users/mbackus/Google_Drive/RDE_Internship/WasteSensor/target/1.2.1/boron/WasteSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021b8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016264  2**0
                  CONTENTS
  3 .data         00000068  2003e2e8  000d61d0  0000e2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000004a0  2003e350  2003e350  0001e350  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6238  000d6238  00016238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6260  000d6260  00016260  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b1538  00000000  00000000  00016264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fc59  00000000  00000000  000c779c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013e6a  00000000  00000000  000d73f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001da8  00000000  00000000  000eb25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003170  00000000  00000000  000ed007  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003358e  00000000  00000000  000f0177  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000253cb  00000000  00000000  00123705  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e2c1f  00000000  00000000  00148ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b5b0  00000000  00000000  0022b6f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	ec 5d 0d 00                                         .]..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe6b 	bl	d5d08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe70 	bl	d5d1e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2e8 	.word	0x2003e2e8
   d4048:	000d61d0 	.word	0x000d61d0
   d404c:	2003e350 	.word	0x2003e350
   d4050:	2003e350 	.word	0x2003e350
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc99 	bl	d5990 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d61c8 	.word	0x000d61c8
   d4080:	000d618c 	.word	0x000d618c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b818 	b.w	d40b8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f853 	bl	d4134 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bc4b 	b.w	d592c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbf1 	b.w	d487c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbf7 	b.w	d488c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbf5 	b.w	d488c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40b2:	4770      	bx	lr

000d40b4 <_ZN16Adafruit_MMA8451D1Ev>:
  MMA8451_DATARATE_MASK       = 0b111
} mma8451_dataRate_t;



class Adafruit_MMA8451
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
   d40b8:	b510      	push	{r4, lr}
   d40ba:	f001 fbf3 	bl	d58a4 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 fbe3 	bl	d588c <_ZN9USBSerial5beginEl>
   d40c6:	211d      	movs	r1, #29
   d40c8:	4815      	ldr	r0, [pc, #84]	; (d4120 <setup+0x68>)
   d40ca:	f000 f90f 	bl	d42ec <_ZN16Adafruit_MMA84515beginEh>
   d40ce:	b928      	cbnz	r0, d40dc <setup+0x24>
   d40d0:	f001 fbe8 	bl	d58a4 <_Z16_fetch_usbserialv>
   d40d4:	4913      	ldr	r1, [pc, #76]	; (d4124 <setup+0x6c>)
   d40d6:	f001 f9ca 	bl	d546e <_ZN5Print7printlnEPKc>
   d40da:	e7fe      	b.n	d40da <setup+0x22>
   d40dc:	f001 fbe2 	bl	d58a4 <_Z16_fetch_usbserialv>
   d40e0:	4911      	ldr	r1, [pc, #68]	; (d4128 <setup+0x70>)
   d40e2:	f001 f9c4 	bl	d546e <_ZN5Print7printlnEPKc>
   d40e6:	2100      	movs	r1, #0
   d40e8:	480d      	ldr	r0, [pc, #52]	; (d4120 <setup+0x68>)
   d40ea:	f000 f93a 	bl	d4362 <_ZN16Adafruit_MMA84518setRangeE15mma8451_range_t>
   d40ee:	f001 fbd9 	bl	d58a4 <_Z16_fetch_usbserialv>
   d40f2:	490e      	ldr	r1, [pc, #56]	; (d412c <setup+0x74>)
   d40f4:	f001 f9a8 	bl	d5448 <_ZN5Print5printEPKc>
   d40f8:	f001 fbd4 	bl	d58a4 <_Z16_fetch_usbserialv>
   d40fc:	4604      	mov	r4, r0
   d40fe:	4808      	ldr	r0, [pc, #32]	; (d4120 <setup+0x68>)
   d4100:	f000 f94a 	bl	d4398 <_ZN16Adafruit_MMA84518getRangeEv>
   d4104:	2102      	movs	r1, #2
   d4106:	4081      	lsls	r1, r0
   d4108:	220a      	movs	r2, #10
   d410a:	4620      	mov	r0, r4
   d410c:	f001 fa0a 	bl	d5524 <_ZN5Print5printEii>
   d4110:	f001 fbc8 	bl	d58a4 <_Z16_fetch_usbserialv>
   d4114:	4906      	ldr	r1, [pc, #24]	; (d4130 <setup+0x78>)
   d4116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d411a:	f001 b9a8 	b.w	d546e <_ZN5Print7printlnEPKc>
   d411e:	bf00      	nop
   d4120:	2003e354 	.word	0x2003e354
   d4124:	000d5e00 	.word	0x000d5e00
   d4128:	000d5e0e 	.word	0x000d5e0e
   d412c:	000d5e1d 	.word	0x000d5e1d
   d4130:	000d5e26 	.word	0x000d5e26

000d4134 <loop>:
   d4134:	b510      	push	{r4, lr}
   d4136:	481f      	ldr	r0, [pc, #124]	; (d41b4 <loop+0x80>)
   d4138:	b08c      	sub	sp, #48	; 0x30
   d413a:	f000 f934 	bl	d43a6 <_ZN16Adafruit_MMA84514readEv>
   d413e:	491e      	ldr	r1, [pc, #120]	; (d41b8 <loop+0x84>)
   d4140:	a808      	add	r0, sp, #32
   d4142:	f001 fa68 	bl	d5616 <_ZN6StringC1EPK19__FlashStringHelper>
   d4146:	4b1d      	ldr	r3, [pc, #116]	; (d41bc <loop+0x88>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4148:	9a08      	ldr	r2, [sp, #32]
   d414a:	781b      	ldrb	r3, [r3, #0]
   d414c:	f88d 3000 	strb.w	r3, [sp]
   d4150:	491b      	ldr	r1, [pc, #108]	; (d41c0 <loop+0x8c>)
   d4152:	233c      	movs	r3, #60	; 0x3c
   d4154:	a806      	add	r0, sp, #24
   d4156:	f000 fd7f 	bl	d4c58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d415a:	9c07      	ldr	r4, [sp, #28]
   d415c:	b17c      	cbz	r4, d417e <loop+0x4a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d415e:	6863      	ldr	r3, [r4, #4]
   d4160:	3b01      	subs	r3, #1
   d4162:	6063      	str	r3, [r4, #4]
   d4164:	b95b      	cbnz	r3, d417e <loop+0x4a>
        {
          _M_dispose();
   d4166:	6823      	ldr	r3, [r4, #0]
   d4168:	4620      	mov	r0, r4
   d416a:	689b      	ldr	r3, [r3, #8]
   d416c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d416e:	68a3      	ldr	r3, [r4, #8]
   d4170:	3b01      	subs	r3, #1
   d4172:	60a3      	str	r3, [r4, #8]
   d4174:	b91b      	cbnz	r3, d417e <loop+0x4a>
            _M_destroy();
   d4176:	6823      	ldr	r3, [r4, #0]
   d4178:	4620      	mov	r0, r4
   d417a:	68db      	ldr	r3, [r3, #12]
   d417c:	4798      	blx	r3
   d417e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4182:	f000 fba3 	bl	d48cc <delay>
   d4186:	4b0f      	ldr	r3, [pc, #60]	; (d41c4 <loop+0x90>)
   d4188:	6819      	ldr	r1, [r3, #0]
   d418a:	2308      	movs	r3, #8
   d418c:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4190:	ab0c      	add	r3, sp, #48	; 0x30
   d4192:	2201      	movs	r2, #1
   d4194:	f803 2d1b 	strb.w	r2, [r3, #-27]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4198:	9102      	str	r1, [sp, #8]
   d419a:	2100      	movs	r1, #0
   d419c:	9101      	str	r1, [sp, #4]
   d419e:	9200      	str	r2, [sp, #0]
   d41a0:	f10d 0116 	add.w	r1, sp, #22
   d41a4:	a806      	add	r0, sp, #24
   d41a6:	f001 fa61 	bl	d566c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
   d41aa:	a808      	add	r0, sp, #32
   d41ac:	f001 f9ec 	bl	d5588 <_ZN6StringD1Ev>
   d41b0:	b00c      	add	sp, #48	; 0x30
   d41b2:	bd10      	pop	{r4, pc}
   d41b4:	2003e354 	.word	0x2003e354
   d41b8:	000d5e28 	.word	0x000d5e28
   d41bc:	2003e374 	.word	0x2003e374
   d41c0:	000d5e49 	.word	0x000d5e49
   d41c4:	2003e378 	.word	0x2003e378

000d41c8 <_ZN16Adafruit_MMA8451D0Ev>:
   d41c8:	b510      	push	{r4, lr}
   d41ca:	2120      	movs	r1, #32
   d41cc:	4604      	mov	r4, r0
   d41ce:	f001 fc40 	bl	d5a52 <_ZdlPvj>
   d41d2:	4620      	mov	r0, r4
   d41d4:	bd10      	pop	{r4, pc}
	...

000d41d8 <_GLOBAL__sub_I_mma>:
   d41d8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41da:	4b0a      	ldr	r3, [pc, #40]	; (d4204 <_GLOBAL__sub_I_mma+0x2c>)
   d41dc:	4c0a      	ldr	r4, [pc, #40]	; (d4208 <_GLOBAL__sub_I_mma+0x30>)
   d41de:	2200      	movs	r2, #0
   d41e0:	601a      	str	r2, [r3, #0]
   d41e2:	4b0a      	ldr	r3, [pc, #40]	; (d420c <_GLOBAL__sub_I_mma+0x34>)
   d41e4:	2201      	movs	r2, #1
   d41e6:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41e8:	f000 f9c2 	bl	d4570 <HAL_Pin_Map>
   d41ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d41f0:	4620      	mov	r0, r4
   d41f2:	f000 f875 	bl	d42e0 <_ZN16Adafruit_MMA8451C1El>
   d41f6:	4620      	mov	r0, r4
   d41f8:	4a05      	ldr	r2, [pc, #20]	; (d4210 <_GLOBAL__sub_I_mma+0x38>)
   d41fa:	4906      	ldr	r1, [pc, #24]	; (d4214 <_GLOBAL__sub_I_mma+0x3c>)
   d41fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4200:	f001 bc22 	b.w	d5a48 <__aeabi_atexit>
   d4204:	2003e378 	.word	0x2003e378
   d4208:	2003e354 	.word	0x2003e354
   d420c:	2003e374 	.word	0x2003e374
   d4210:	2003e350 	.word	0x2003e350
   d4214:	000d40b5 	.word	0x000d40b5

000d4218 <_ZL8i2cwriteh>:
  #else
  return Wire.receive();
  #endif
}

static inline void i2cwrite(uint8_t x) {
   d4218:	b510      	push	{r4, lr}
   d421a:	4604      	mov	r4, r0
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d421c:	f001 fbd2 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d4220:	6803      	ldr	r3, [r0, #0]
   d4222:	4621      	mov	r1, r4
   d4224:	689b      	ldr	r3, [r3, #8]
  #else
  Wire.send(x);
  #endif
}
   d4226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #endif
}

static inline void i2cwrite(uint8_t x) {
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d422a:	4718      	bx	r3

000d422c <_ZN16Adafruit_MMA84519getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_MMA8451::getSensor(sensor_t *sensor) {
   d422c:	b538      	push	{r3, r4, r5, lr}
   d422e:	460c      	mov	r4, r1
   d4230:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d4232:	2228      	movs	r2, #40	; 0x28
   d4234:	2100      	movs	r1, #0
   d4236:	4620      	mov	r0, r4
   d4238:	f001 fd71 	bl	d5d1e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "MMA8451", sizeof(sensor->name) - 1);
   d423c:	220b      	movs	r2, #11
   d423e:	4908      	ldr	r1, [pc, #32]	; (d4260 <_ZN16Adafruit_MMA84519getSensorEP8sensor_t+0x34>)
   d4240:	4620      	mov	r0, r4
   d4242:	f001 fdc0 	bl	d5dc6 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4246:	2300      	movs	r3, #0
  sensor->version     = 1;
   d4248:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "MMA8451", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d424a:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d424c:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d424e:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4250:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
   d4252:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "MMA8451", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d4254:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d4256:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
   d4258:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
   d425a:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
   d425c:	6223      	str	r3, [r4, #32]
   d425e:	bd38      	pop	{r3, r4, r5, pc}
   d4260:	000d5e78 	.word	0x000d5e78

000d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_MMA8451::writeRegister8(uint8_t reg, uint8_t value) {
   d4264:	b570      	push	{r4, r5, r6, lr}
   d4266:	4606      	mov	r6, r0
   d4268:	4614      	mov	r4, r2
   d426a:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
   d426c:	f001 fbaa 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d4270:	f996 101c 	ldrsb.w	r1, [r6, #28]
   d4274:	f000 feea 	bl	d504c <_ZN7TwoWire17beginTransmissionEi>
  i2cwrite((uint8_t)reg);
   d4278:	4628      	mov	r0, r5
   d427a:	f7ff ffcd 	bl	d4218 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value));
   d427e:	4620      	mov	r0, r4
   d4280:	f7ff ffca 	bl	d4218 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d4284:	f001 fb9e 	bl	d59c4 <_Z19__fetch_global_Wirev>
}
   d4288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/**************************************************************************/
void Adafruit_MMA8451::writeRegister8(uint8_t reg, uint8_t value) {
  Wire.beginTransmission(_i2caddr);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value));
  Wire.endTransmission();
   d428c:	f000 bee5 	b.w	d505a <_ZN7TwoWire15endTransmissionEv>

000d4290 <_ZN16Adafruit_MMA845113readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_MMA8451::readRegister8(uint8_t reg) {
   d4290:	b538      	push	{r3, r4, r5, lr}
   d4292:	4604      	mov	r4, r0
   d4294:	460d      	mov	r5, r1
    Wire.beginTransmission(_i2caddr);
   d4296:	f001 fb95 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d429a:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d429e:	f000 fed5 	bl	d504c <_ZN7TwoWire17beginTransmissionEi>
    i2cwrite(reg);
   d42a2:	4628      	mov	r0, r5
   d42a4:	f7ff ffb8 	bl	d4218 <_ZL8i2cwriteh>
    Wire.endTransmission(false); // MMA8451 + friends uses repeated start!!
   d42a8:	f001 fb8c 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d42ac:	2100      	movs	r1, #0
   d42ae:	f000 fed0 	bl	d5052 <_ZN7TwoWire15endTransmissionEh>

    Wire.requestFrom(_i2caddr, 1);
   d42b2:	f001 fb87 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d42b6:	2201      	movs	r2, #1
   d42b8:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d42bc:	f000 febd 	bl	d503a <_ZN7TwoWire11requestFromEii>
    if (! Wire.available()) return -1;
   d42c0:	f001 fb80 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d42c4:	6803      	ldr	r3, [r0, #0]
   d42c6:	691b      	ldr	r3, [r3, #16]
   d42c8:	4798      	blx	r3
   d42ca:	b130      	cbz	r0, d42da <_ZN16Adafruit_MMA845113readRegister8Eh+0x4a>
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static inline uint8_t i2cread(void) {
  #if ARDUINO >= 100
  return Wire.read();
   d42cc:	f001 fb7a 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d42d0:	6803      	ldr	r3, [r0, #0]
   d42d2:	695b      	ldr	r3, [r3, #20]
   d42d4:	4798      	blx	r3
   d42d6:	b2c0      	uxtb	r0, r0
    i2cwrite(reg);
    Wire.endTransmission(false); // MMA8451 + friends uses repeated start!!

    Wire.requestFrom(_i2caddr, 1);
    if (! Wire.available()) return -1;
    return (i2cread());
   d42d8:	bd38      	pop	{r3, r4, r5, pc}
    Wire.beginTransmission(_i2caddr);
    i2cwrite(reg);
    Wire.endTransmission(false); // MMA8451 + friends uses repeated start!!

    Wire.requestFrom(_i2caddr, 1);
    if (! Wire.available()) return -1;
   d42da:	20ff      	movs	r0, #255	; 0xff
    return (i2cread());
}
   d42dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d42e0 <_ZN16Adafruit_MMA8451C1El>:
/**************************************************************************/
/*!
    @brief  Instantiates a new MMA8451 class in I2C mode
*/
/**************************************************************************/
Adafruit_MMA8451::Adafruit_MMA8451(int32_t sensorID) {
   d42e0:	4a01      	ldr	r2, [pc, #4]	; (d42e8 <_ZN16Adafruit_MMA8451C1El+0x8>)
   d42e2:	6002      	str	r2, [r0, #0]
  _sensorID = sensorID;
   d42e4:	6181      	str	r1, [r0, #24]
}
   d42e6:	4770      	bx	lr
   d42e8:	000d5e64 	.word	0x000d5e64

000d42ec <_ZN16Adafruit_MMA84515beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_MMA8451::begin(uint8_t i2caddr) {
   d42ec:	b538      	push	{r3, r4, r5, lr}
   d42ee:	4604      	mov	r4, r0
   d42f0:	460d      	mov	r5, r1
  Wire.begin();
   d42f2:	f001 fb67 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d42f6:	f000 fe91 	bl	d501c <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
   d42fa:	7725      	strb	r5, [r4, #28]

  /* Check connection */
  uint8_t deviceid = readRegister8(MMA8451_REG_WHOAMI);
   d42fc:	210d      	movs	r1, #13
   d42fe:	4620      	mov	r0, r4
   d4300:	f7ff ffc6 	bl	d4290 <_ZN16Adafruit_MMA845113readRegister8Eh>
  if (deviceid != 0x1A)
   d4304:	281a      	cmp	r0, #26
   d4306:	d12a      	bne.n	d435e <_ZN16Adafruit_MMA84515beginEh+0x72>
    /* No MMA8451 detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
  }

  writeRegister8(MMA8451_REG_CTRL_REG2, 0x40); // reset
   d4308:	2240      	movs	r2, #64	; 0x40
   d430a:	212b      	movs	r1, #43	; 0x2b
   d430c:	4620      	mov	r0, r4
   d430e:	f7ff ffa9 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>

  while (readRegister8(MMA8451_REG_CTRL_REG2) & 0x40);
   d4312:	212b      	movs	r1, #43	; 0x2b
   d4314:	4620      	mov	r0, r4
   d4316:	f7ff ffbb 	bl	d4290 <_ZN16Adafruit_MMA845113readRegister8Eh>
   d431a:	0643      	lsls	r3, r0, #25
   d431c:	d4f9      	bmi.n	d4312 <_ZN16Adafruit_MMA84515beginEh+0x26>

  // enable 4G range
  writeRegister8(MMA8451_REG_XYZ_DATA_CFG, MMA8451_RANGE_4_G);
   d431e:	4620      	mov	r0, r4
   d4320:	2201      	movs	r2, #1
   d4322:	210e      	movs	r1, #14
   d4324:	f7ff ff9e 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>
  // High res
  writeRegister8(MMA8451_REG_CTRL_REG2, 0x02);
   d4328:	4620      	mov	r0, r4
   d432a:	2202      	movs	r2, #2
   d432c:	212b      	movs	r1, #43	; 0x2b
   d432e:	f7ff ff99 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>
  // DRDY on INT1
  writeRegister8(MMA8451_REG_CTRL_REG4, 0x01);
   d4332:	4620      	mov	r0, r4
   d4334:	2201      	movs	r2, #1
   d4336:	212d      	movs	r1, #45	; 0x2d
   d4338:	f7ff ff94 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>
  writeRegister8(MMA8451_REG_CTRL_REG5, 0x01);
   d433c:	4620      	mov	r0, r4
   d433e:	2201      	movs	r2, #1
   d4340:	212e      	movs	r1, #46	; 0x2e
   d4342:	f7ff ff8f 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>

  // Turn on orientation config
  writeRegister8(MMA8451_REG_PL_CFG, 0x40);
   d4346:	4620      	mov	r0, r4
   d4348:	2240      	movs	r2, #64	; 0x40
   d434a:	2111      	movs	r1, #17
   d434c:	f7ff ff8a 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>

  // Activate at max rate, low noise mode
  writeRegister8(MMA8451_REG_CTRL_REG1, 0x01 | 0x04);
   d4350:	4620      	mov	r0, r4
   d4352:	2205      	movs	r2, #5
   d4354:	212a      	movs	r1, #42	; 0x2a
   d4356:	f7ff ff85 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
   d435a:	2001      	movs	r0, #1
   d435c:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t deviceid = readRegister8(MMA8451_REG_WHOAMI);
  if (deviceid != 0x1A)
  {
    /* No MMA8451 detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
   d435e:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
   d4360:	bd38      	pop	{r3, r4, r5, pc}

000d4362 <_ZN16Adafruit_MMA84518setRangeE15mma8451_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_MMA8451::setRange(mma8451_range_t range)
{
   d4362:	b570      	push	{r4, r5, r6, lr}
   d4364:	460e      	mov	r6, r1
  uint8_t reg1 = readRegister8(MMA8451_REG_CTRL_REG1);
   d4366:	212a      	movs	r1, #42	; 0x2a
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_MMA8451::setRange(mma8451_range_t range)
{
   d4368:	4604      	mov	r4, r0
  uint8_t reg1 = readRegister8(MMA8451_REG_CTRL_REG1);
   d436a:	f7ff ff91 	bl	d4290 <_ZN16Adafruit_MMA845113readRegister8Eh>
  writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
   d436e:	2200      	movs	r2, #0
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_MMA8451::setRange(mma8451_range_t range)
{
  uint8_t reg1 = readRegister8(MMA8451_REG_CTRL_REG1);
   d4370:	4605      	mov	r5, r0
  writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
   d4372:	212a      	movs	r1, #42	; 0x2a
   d4374:	4620      	mov	r0, r4
   d4376:	f7ff ff75 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>
  writeRegister8(MMA8451_REG_XYZ_DATA_CFG, range & 0x3);
   d437a:	f006 0203 	and.w	r2, r6, #3
   d437e:	4620      	mov	r0, r4
   d4380:	210e      	movs	r1, #14
   d4382:	f7ff ff6f 	bl	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>
  writeRegister8(MMA8451_REG_CTRL_REG1, reg1 | 0x01);     // activate
   d4386:	f045 0201 	orr.w	r2, r5, #1
   d438a:	4620      	mov	r0, r4
   d438c:	b2d2      	uxtb	r2, r2
   d438e:	212a      	movs	r1, #42	; 0x2a
}
   d4390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_MMA8451::setRange(mma8451_range_t range)
{
  uint8_t reg1 = readRegister8(MMA8451_REG_CTRL_REG1);
  writeRegister8(MMA8451_REG_CTRL_REG1, 0x00);            // deactivate
  writeRegister8(MMA8451_REG_XYZ_DATA_CFG, range & 0x3);
  writeRegister8(MMA8451_REG_CTRL_REG1, reg1 | 0x01);     // activate
   d4394:	f7ff bf66 	b.w	d4264 <_ZN16Adafruit_MMA845114writeRegister8Ehh>

000d4398 <_ZN16Adafruit_MMA84518getRangeEv>:
/*!
    @brief  Gets the g range for the accelerometer
*/
/**************************************************************************/
mma8451_range_t Adafruit_MMA8451::getRange(void)
{
   d4398:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (mma8451_range_t)(readRegister8(MMA8451_REG_XYZ_DATA_CFG) & 0x03);
   d439a:	210e      	movs	r1, #14
   d439c:	f7ff ff78 	bl	d4290 <_ZN16Adafruit_MMA845113readRegister8Eh>
}
   d43a0:	f000 0003 	and.w	r0, r0, #3
   d43a4:	bd08      	pop	{r3, pc}

000d43a6 <_ZN16Adafruit_MMA84514readEv>:

  return true;
}


void Adafruit_MMA8451::read(void) {
   d43a6:	b510      	push	{r4, lr}
   d43a8:	4604      	mov	r4, r0
  // read x y z at once
  Wire.beginTransmission(_i2caddr);
   d43aa:	f001 fb0b 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d43ae:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d43b2:	f000 fe4b 	bl	d504c <_ZN7TwoWire17beginTransmissionEi>
  i2cwrite(MMA8451_REG_OUT_X_MSB);
   d43b6:	2001      	movs	r0, #1
   d43b8:	f7ff ff2e 	bl	d4218 <_ZL8i2cwriteh>
  Wire.endTransmission(false); // MMA8451 + friends uses repeated start!!
   d43bc:	f001 fb02 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d43c0:	2100      	movs	r1, #0
   d43c2:	f000 fe46 	bl	d5052 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 6);
   d43c6:	f001 fafd 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d43ca:	2206      	movs	r2, #6
   d43cc:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d43d0:	f000 fe33 	bl	d503a <_ZN7TwoWire11requestFromEii>
  x = Wire.read(); x <<= 8; x |= Wire.read(); x >>= 2;
   d43d4:	f001 faf6 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d43d8:	6803      	ldr	r3, [r0, #0]
   d43da:	695b      	ldr	r3, [r3, #20]
   d43dc:	4798      	blx	r3
   d43de:	0200      	lsls	r0, r0, #8
   d43e0:	80e0      	strh	r0, [r4, #6]
   d43e2:	f001 faef 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d43e6:	6803      	ldr	r3, [r0, #0]
   d43e8:	695b      	ldr	r3, [r3, #20]
   d43ea:	4798      	blx	r3
   d43ec:	88e3      	ldrh	r3, [r4, #6]
   d43ee:	4318      	orrs	r0, r3
   d43f0:	f340 008d 	sbfx	r0, r0, #2, #14
   d43f4:	80e0      	strh	r0, [r4, #6]
  y = Wire.read(); y <<= 8; y |= Wire.read(); y >>= 2;
   d43f6:	f001 fae5 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d43fa:	6803      	ldr	r3, [r0, #0]
   d43fc:	695b      	ldr	r3, [r3, #20]
   d43fe:	4798      	blx	r3
   d4400:	0200      	lsls	r0, r0, #8
   d4402:	8120      	strh	r0, [r4, #8]
   d4404:	f001 fade 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d4408:	6803      	ldr	r3, [r0, #0]
   d440a:	695b      	ldr	r3, [r3, #20]
   d440c:	4798      	blx	r3
   d440e:	8923      	ldrh	r3, [r4, #8]
   d4410:	4318      	orrs	r0, r3
   d4412:	f340 008d 	sbfx	r0, r0, #2, #14
   d4416:	8120      	strh	r0, [r4, #8]
  z = Wire.read(); z <<= 8; z |= Wire.read(); z >>= 2;
   d4418:	f001 fad4 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d441c:	6803      	ldr	r3, [r0, #0]
   d441e:	695b      	ldr	r3, [r3, #20]
   d4420:	4798      	blx	r3
   d4422:	0200      	lsls	r0, r0, #8
   d4424:	8160      	strh	r0, [r4, #10]
   d4426:	f001 facd 	bl	d59c4 <_Z19__fetch_global_Wirev>
   d442a:	6803      	ldr	r3, [r0, #0]
   d442c:	695b      	ldr	r3, [r3, #20]
   d442e:	4798      	blx	r3
   d4430:	8963      	ldrh	r3, [r4, #10]
   d4432:	4318      	orrs	r0, r3
   d4434:	f340 008d 	sbfx	r0, r0, #2, #14
   d4438:	8160      	strh	r0, [r4, #10]


  uint8_t range = getRange();
   d443a:	4620      	mov	r0, r4
   d443c:	f7ff ffac 	bl	d4398 <_ZN16Adafruit_MMA84518getRangeEv>
  uint16_t divider = 1;
  if (range == MMA8451_RANGE_8_G) divider = 1024;
   d4440:	2802      	cmp	r0, #2
   d4442:	d007      	beq.n	d4454 <_ZN16Adafruit_MMA84514readEv+0xae>
  if (range == MMA8451_RANGE_4_G) divider = 2048;
   d4444:	2801      	cmp	r0, #1
   d4446:	d008      	beq.n	d445a <_ZN16Adafruit_MMA84514readEv+0xb4>
  if (range == MMA8451_RANGE_2_G) divider = 4096;
   d4448:	2800      	cmp	r0, #0
   d444a:	bf14      	ite	ne
   d444c:	2301      	movne	r3, #1
   d444e:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
   d4452:	e004      	b.n	d445e <_ZN16Adafruit_MMA84514readEv+0xb8>
  z = Wire.read(); z <<= 8; z |= Wire.read(); z >>= 2;


  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == MMA8451_RANGE_8_G) divider = 1024;
   d4454:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4458:	e001      	b.n	d445e <_ZN16Adafruit_MMA84514readEv+0xb8>
  if (range == MMA8451_RANGE_4_G) divider = 2048;
   d445a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  if (range == MMA8451_RANGE_2_G) divider = 4096;

  x_g = (float)x / divider;
   d445e:	ee07 3a90 	vmov	s15, r3
   d4462:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4466:	ee07 3a10 	vmov	s14, r3
   d446a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d446e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4472:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  uint16_t divider = 1;
  if (range == MMA8451_RANGE_8_G) divider = 1024;
  if (range == MMA8451_RANGE_4_G) divider = 2048;
  if (range == MMA8451_RANGE_2_G) divider = 4096;

  x_g = (float)x / divider;
   d4476:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d447a:	ee07 3a10 	vmov	s14, r3
   d447e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  uint16_t divider = 1;
  if (range == MMA8451_RANGE_8_G) divider = 1024;
  if (range == MMA8451_RANGE_4_G) divider = 2048;
  if (range == MMA8451_RANGE_2_G) divider = 4096;

  x_g = (float)x / divider;
   d4482:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4486:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d448a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d448e:	ee07 3a10 	vmov	s14, r3
   d4492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if (range == MMA8451_RANGE_8_G) divider = 1024;
  if (range == MMA8451_RANGE_4_G) divider = 2048;
  if (range == MMA8451_RANGE_2_G) divider = 4096;

  x_g = (float)x / divider;
  y_g = (float)y / divider;
   d4496:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d449a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d449e:	edc4 6a05 	vstr	s13, [r4, #20]
   d44a2:	bd10      	pop	{r4, pc}

000d44a4 <_ZN16Adafruit_MMA84518getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_MMA8451::getEvent(sensors_event_t *event) {
   d44a4:	b570      	push	{r4, r5, r6, lr}
   d44a6:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d44a8:	2624      	movs	r6, #36	; 0x24
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_MMA8451::getEvent(sensors_event_t *event) {
   d44aa:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d44ac:	4632      	mov	r2, r6
   d44ae:	2100      	movs	r1, #0
   d44b0:	4620      	mov	r0, r4
   d44b2:	f001 fc34 	bl	d5d1e <memset>

  event->version   = sizeof(sensors_event_t);
   d44b6:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d44b8:	69ab      	ldr	r3, [r5, #24]
   d44ba:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d44bc:	2601      	movs	r6, #1
  event->timestamp = 0;
   d44be:	2300      	movs	r3, #0

  read();
   d44c0:	4628      	mov	r0, r5
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d44c2:	60a6      	str	r6, [r4, #8]
  event->timestamp = 0;
   d44c4:	6123      	str	r3, [r4, #16]

  read();
   d44c6:	f7ff ff6e 	bl	d43a6 <_ZN16Adafruit_MMA84514readEv>

  // Convert Acceleration Data to m/s^2
  event->acceleration.x = x_g * SENSORS_GRAVITY_STANDARD;
   d44ca:	edd5 7a03 	vldr	s15, [r5, #12]
   d44ce:	ed9f 7a0a 	vldr	s14, [pc, #40]	; d44f8 <_ZN16Adafruit_MMA84518getEventEP15sensors_event_t+0x54>
   d44d2:	ee67 7a87 	vmul.f32	s15, s15, s14
  event->acceleration.y = y_g * SENSORS_GRAVITY_STANDARD;
  event->acceleration.z = z_g * SENSORS_GRAVITY_STANDARD;

  return true;
}
   d44d6:	4630      	mov	r0, r6
  event->timestamp = 0;

  read();

  // Convert Acceleration Data to m/s^2
  event->acceleration.x = x_g * SENSORS_GRAVITY_STANDARD;
   d44d8:	edc4 7a05 	vstr	s15, [r4, #20]
  event->acceleration.y = y_g * SENSORS_GRAVITY_STANDARD;
   d44dc:	edd5 7a04 	vldr	s15, [r5, #16]
   d44e0:	ee67 7a87 	vmul.f32	s15, s15, s14
   d44e4:	edc4 7a06 	vstr	s15, [r4, #24]
  event->acceleration.z = z_g * SENSORS_GRAVITY_STANDARD;
   d44e8:	edd5 7a05 	vldr	s15, [r5, #20]
   d44ec:	ee67 7a87 	vmul.f32	s15, s15, s14
   d44f0:	edc4 7a07 	vstr	s15, [r4, #28]

  return true;
}
   d44f4:	bd70      	pop	{r4, r5, r6, pc}
   d44f6:	bf00      	nop
   d44f8:	411ce80a 	.word	0x411ce80a

000d44fc <_GLOBAL__sub_I__ZN16Adafruit_MMA845114writeRegister8Ehh>:
   d44fc:	f000 b838 	b.w	d4570 <HAL_Pin_Map>

000d4500 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <os_thread_is_current+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	689b      	ldr	r3, [r3, #8]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030248 	.word	0x00030248

000d4510 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <os_thread_join+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	691b      	ldr	r3, [r3, #16]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030248 	.word	0x00030248

000d4520 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <os_thread_cleanup+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	695b      	ldr	r3, [r3, #20]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030248 	.word	0x00030248

000d4530 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <os_mutex_create+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030248 	.word	0x00030248

000d4540 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <os_mutex_recursive_create+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030248 	.word	0x00030248

000d4550 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_RNG_GetRandomNumber+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	685b      	ldr	r3, [r3, #4]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030218 	.word	0x00030218

000d4560 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	695b      	ldr	r3, [r3, #20]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030218 	.word	0x00030218

000d4570 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_Pin_Map+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	681b      	ldr	r3, [r3, #0]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003022c 	.word	0x0003022c

000d4580 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_I2C_Begin+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	68db      	ldr	r3, [r3, #12]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030228 	.word	0x00030228

000d4590 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_I2C_Request_Data+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030228 	.word	0x00030228

000d45a0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_I2C_Begin_Transmission+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	699b      	ldr	r3, [r3, #24]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030228 	.word	0x00030228

000d45b0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_I2C_End_Transmission+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	69db      	ldr	r3, [r3, #28]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030228 	.word	0x00030228

000d45c0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_I2C_Write_Data+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6a1b      	ldr	r3, [r3, #32]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030228 	.word	0x00030228

000d45d0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_I2C_Available_Data+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030228 	.word	0x00030228

000d45e0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_I2C_Read_Data+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030228 	.word	0x00030228

000d45f0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_I2C_Peek_Data+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030228 	.word	0x00030228

000d4600 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_I2C_Flush_Data+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030228 	.word	0x00030228

000d4610 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_I2C_Init+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030228 	.word	0x00030228

000d4620 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <inet_inet_ntop+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	695b      	ldr	r3, [r3, #20]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030264 	.word	0x00030264

000d4630 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <netdb_freeaddrinfo+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	689b      	ldr	r3, [r3, #8]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030268 	.word	0x00030268

000d4640 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <netdb_getaddrinfo+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	68db      	ldr	r3, [r3, #12]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030268 	.word	0x00030268

000d4650 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_SPI_Init+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	69db      	ldr	r3, [r3, #28]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030230 	.word	0x00030230

000d4660 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_USART_Init+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	681b      	ldr	r3, [r3, #0]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	0003023c 	.word	0x0003023c

000d4670 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_USART_Write_Data+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	68db      	ldr	r3, [r3, #12]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	0003023c 	.word	0x0003023c

000d4680 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_USART_Available_Data+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	691b      	ldr	r3, [r3, #16]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	0003023c 	.word	0x0003023c

000d4690 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_USART_Read_Data+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	695b      	ldr	r3, [r3, #20]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003023c 	.word	0x0003023c

000d46a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_USART_Peek_Data+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	699b      	ldr	r3, [r3, #24]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003023c 	.word	0x0003023c

000d46b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_USART_Flush_Data+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	69db      	ldr	r3, [r3, #28]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003023c 	.word	0x0003023c

000d46c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_USART_Available_Data_For_Write+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003023c 	.word	0x0003023c

000d46d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_USB_USART_Init+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	681b      	ldr	r3, [r3, #0]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003024c 	.word	0x0003024c

000d46e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_USB_USART_Begin+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	685b      	ldr	r3, [r3, #4]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003024c 	.word	0x0003024c

000d46f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_USB_USART_Available_Data+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	691b      	ldr	r3, [r3, #16]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003024c 	.word	0x0003024c

000d4700 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	695b      	ldr	r3, [r3, #20]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003024c 	.word	0x0003024c

000d4710 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USB_USART_Receive_Data+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	699b      	ldr	r3, [r3, #24]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003024c 	.word	0x0003024c

000d4720 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USB_USART_Send_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	69db      	ldr	r3, [r3, #28]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003024c 	.word	0x0003024c

000d4730 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USB_USART_Flush_Data+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6a1b      	ldr	r3, [r3, #32]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003024c 	.word	0x0003024c

000d4740 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <set_system_mode+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	685b      	ldr	r3, [r3, #4]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030220 	.word	0x00030220

000d4750 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <system_delay_ms+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	695b      	ldr	r3, [r3, #20]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030220 	.word	0x00030220

000d4760 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <application_thread_current+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030220 	.word	0x00030220

000d4770 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <application_thread_invoke+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030220 	.word	0x00030220

000d4780 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b03      	ldr	r3, [pc, #12]	; (d4790 <system_ctrl_set_app_request_handler+0x10>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d478a:	9301      	str	r3, [sp, #4]
   d478c:	bd08      	pop	{r3, pc}
   d478e:	0000      	.short	0x0000
   d4790:	00030220 	.word	0x00030220

000d4794 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b03      	ldr	r3, [pc, #12]	; (d47a4 <system_ctrl_set_result+0x10>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d479e:	9301      	str	r3, [sp, #4]
   d47a0:	bd08      	pop	{r3, pc}
   d47a2:	0000      	.short	0x0000
   d47a4:	00030220 	.word	0x00030220

000d47a8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b03      	ldr	r3, [pc, #12]	; (d47b8 <system_sleep_pins+0x10>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d47b2:	9301      	str	r3, [sp, #4]
   d47b4:	bd08      	pop	{r3, pc}
   d47b6:	0000      	.short	0x0000
   d47b8:	00030220 	.word	0x00030220

000d47bc <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <spark_send_event+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a1b      	ldr	r3, [r3, #32]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030244 	.word	0x00030244

000d47cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030244 	.word	0x00030244

000d47dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_connect+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	685b      	ldr	r3, [r3, #4]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_connecting+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	689b      	ldr	r3, [r3, #8]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_disconnect+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	68db      	ldr	r3, [r3, #12]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_ready+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	691b      	ldr	r3, [r3, #16]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <network_on+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	695b      	ldr	r3, [r3, #20]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030240 	.word	0x00030240

000d482c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <network_off+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	699b      	ldr	r3, [r3, #24]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030240 	.word	0x00030240

000d483c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <network_listen+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	69db      	ldr	r3, [r3, #28]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030240 	.word	0x00030240

000d484c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <network_listening+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6a1b      	ldr	r3, [r3, #32]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030240 	.word	0x00030240

000d485c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <network_set_listen_timeout+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030240 	.word	0x00030240

000d486c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <network_get_listen_timeout+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030240 	.word	0x00030240

000d487c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <malloc+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	681b      	ldr	r3, [r3, #0]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003021c 	.word	0x0003021c

000d488c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <free+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	685b      	ldr	r3, [r3, #4]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <realloc+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	689b      	ldr	r3, [r3, #8]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003021c 	.word	0x0003021c

000d48ac <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <abort+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003021c 	.word	0x0003021c

000d48bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <_malloc_r+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003021c 	.word	0x0003021c

000d48cc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48cc:	2100      	movs	r1, #0
   d48ce:	f7ff bf3f 	b.w	d4750 <system_delay_ms>

000d48d2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d48d2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d48d4:	6883      	ldr	r3, [r0, #8]
   d48d6:	4604      	mov	r4, r0
   d48d8:	b90b      	cbnz	r3, d48de <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d48da:	f001 f8bc 	bl	d5a56 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48de:	68c3      	ldr	r3, [r0, #12]
   d48e0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d48e2:	68a3      	ldr	r3, [r4, #8]
   d48e4:	b11b      	cbz	r3, d48ee <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48e6:	2203      	movs	r2, #3
   d48e8:	4621      	mov	r1, r4
   d48ea:	4620      	mov	r0, r4
   d48ec:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48ee:	4620      	mov	r0, r4
   d48f0:	2110      	movs	r1, #16
}
   d48f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48f6:	f001 b8ac 	b.w	d5a52 <_ZdlPvj>

000d48fa <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d48fa:	2200      	movs	r2, #0
   d48fc:	4611      	mov	r1, r2
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f7ff bf84 	b.w	d480c <network_ready>

000d4904 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4904:	2200      	movs	r2, #0
   d4906:	4611      	mov	r1, r2
   d4908:	6840      	ldr	r0, [r0, #4]
   d490a:	f7ff bf9f 	b.w	d484c <network_listening>

000d490e <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d490e:	2200      	movs	r2, #0
   d4910:	4611      	mov	r1, r2
   d4912:	6840      	ldr	r0, [r0, #4]
   d4914:	f7ff bfaa 	b.w	d486c <network_get_listen_timeout>

000d4918 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4918:	2200      	movs	r2, #0
   d491a:	6840      	ldr	r0, [r0, #4]
   d491c:	f7ff bf9e 	b.w	d485c <network_set_listen_timeout>

000d4920 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4920:	2200      	movs	r2, #0
   d4922:	f081 0101 	eor.w	r1, r1, #1
   d4926:	6840      	ldr	r0, [r0, #4]
   d4928:	f7ff bf88 	b.w	d483c <network_listen>

000d492c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d492c:	2300      	movs	r3, #0
   d492e:	461a      	mov	r2, r3
   d4930:	4619      	mov	r1, r3
   d4932:	6840      	ldr	r0, [r0, #4]
   d4934:	f7ff bf7a 	b.w	d482c <network_off>

000d4938 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4938:	2300      	movs	r3, #0
   d493a:	461a      	mov	r2, r3
   d493c:	4619      	mov	r1, r3
   d493e:	6840      	ldr	r0, [r0, #4]
   d4940:	f7ff bf6c 	b.w	d481c <network_on>

000d4944 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4944:	2200      	movs	r2, #0
   d4946:	4611      	mov	r1, r2
   d4948:	6840      	ldr	r0, [r0, #4]
   d494a:	f7ff bf4f 	b.w	d47ec <network_connecting>

000d494e <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d494e:	2200      	movs	r2, #0
   d4950:	2102      	movs	r1, #2
   d4952:	6840      	ldr	r0, [r0, #4]
   d4954:	f7ff bf52 	b.w	d47fc <network_disconnect>

000d4958 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4958:	2300      	movs	r3, #0
   d495a:	461a      	mov	r2, r3
   d495c:	6840      	ldr	r0, [r0, #4]
   d495e:	f7ff bf3d 	b.w	d47dc <network_connect>
	...

000d4964 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4964:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4966:	4c0c      	ldr	r4, [pc, #48]	; (d4998 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d4968:	2528      	movs	r5, #40	; 0x28
   d496a:	462a      	mov	r2, r5
   d496c:	2100      	movs	r1, #0
   d496e:	4620      	mov	r0, r4
   d4970:	f001 f9d5 	bl	d5d1e <memset>
        cid = -1;
   d4974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4978:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
   d497a:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d497c:	4c07      	ldr	r4, [pc, #28]	; (d499c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d497e:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4980:	4620      	mov	r0, r4
   d4982:	6063      	str	r3, [r4, #4]
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d4984:	252c      	movs	r5, #44	; 0x2c
   d4986:	4b06      	ldr	r3, [pc, #24]	; (d49a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d4988:	f840 3b08 	str.w	r3, [r0], #8
   d498c:	462a      	mov	r2, r5
   d498e:	2100      	movs	r1, #0
   d4990:	f001 f9c5 	bl	d5d1e <memset>
        size = sizeof(*this);
   d4994:	8125      	strh	r5, [r4, #8]
   d4996:	bd38      	pop	{r3, r4, r5, pc}
   d4998:	2003e3b0 	.word	0x2003e3b0
   d499c:	2003e37c 	.word	0x2003e37c
   d49a0:	000d5e88 	.word	0x000d5e88

000d49a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d49a4:	4770      	bx	lr

000d49a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d49a6:	2000      	movs	r0, #0
   d49a8:	4770      	bx	lr

000d49aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d49aa:	b510      	push	{r4, lr}
   d49ac:	2110      	movs	r1, #16
   d49ae:	4604      	mov	r4, r0
   d49b0:	f001 f84f 	bl	d5a52 <_ZdlPvj>
   d49b4:	4620      	mov	r0, r4
   d49b6:	bd10      	pop	{r4, pc}

000d49b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d49b8:	b508      	push	{r3, lr}
      { delete this; }
   d49ba:	b108      	cbz	r0, d49c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d49bc:	f7ff fff5 	bl	d49aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d49c0:	bd08      	pop	{r3, pc}

000d49c2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49c2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d49c4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d49c6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d49c8:	b113      	cbz	r3, d49d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d49ca:	2203      	movs	r2, #3
   d49cc:	4601      	mov	r1, r0
   d49ce:	4798      	blx	r3
    }
   d49d0:	4620      	mov	r0, r4
   d49d2:	bd10      	pop	{r4, pc}

000d49d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d49d4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d49d6:	68c4      	ldr	r4, [r0, #12]
   d49d8:	b1ec      	cbz	r4, d4a16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d49da:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d49dc:	2b02      	cmp	r3, #2
   d49de:	d102      	bne.n	d49e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d49e0:	68e0      	ldr	r0, [r4, #12]
   d49e2:	f7ff ff53 	bl	d488c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d49e6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d49e8:	b135      	cbz	r5, d49f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49ea:	4628      	mov	r0, r5
   d49ec:	f7ff ffe9 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
   d49f0:	2110      	movs	r1, #16
   d49f2:	4628      	mov	r0, r5
   d49f4:	f001 f82d 	bl	d5a52 <_ZdlPvj>
   d49f8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d49fa:	b135      	cbz	r5, d4a0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d49fc:	4628      	mov	r0, r5
   d49fe:	f7ff ffe0 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
   d4a02:	2110      	movs	r1, #16
   d4a04:	4628      	mov	r0, r5
   d4a06:	f001 f824 	bl	d5a52 <_ZdlPvj>
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	2114      	movs	r1, #20
   d4a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4a12:	f001 b81e 	b.w	d5a52 <_ZdlPvj>
   d4a16:	bd38      	pop	{r3, r4, r5, pc}

000d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4a18:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4a1a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4a1c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4a1e:	b17c      	cbz	r4, d4a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4a20:	6863      	ldr	r3, [r4, #4]
   d4a22:	3b01      	subs	r3, #1
   d4a24:	6063      	str	r3, [r4, #4]
   d4a26:	b95b      	cbnz	r3, d4a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4a28:	6823      	ldr	r3, [r4, #0]
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	689b      	ldr	r3, [r3, #8]
   d4a2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a30:	68a3      	ldr	r3, [r4, #8]
   d4a32:	3b01      	subs	r3, #1
   d4a34:	60a3      	str	r3, [r4, #8]
   d4a36:	b91b      	cbnz	r3, d4a40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4a38:	6823      	ldr	r3, [r4, #0]
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	68db      	ldr	r3, [r3, #12]
   d4a3e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4a40:	4628      	mov	r0, r5
   d4a42:	bd38      	pop	{r3, r4, r5, pc}

000d4a44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4a44:	b513      	push	{r0, r1, r4, lr}
   d4a46:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4a48:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4a4c:	2300      	movs	r3, #0
   d4a4e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a50:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4a52:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4a54:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a56:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4a58:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4a5a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a5c:	f7ff ffdc 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a60:	4620      	mov	r0, r4
   d4a62:	b002      	add	sp, #8
   d4a64:	bd10      	pop	{r4, pc}

000d4a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4a66:	680b      	ldr	r3, [r1, #0]
   d4a68:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4a6a:	b113      	cbz	r3, d4a72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4a6c:	685a      	ldr	r2, [r3, #4]
   d4a6e:	3201      	adds	r2, #1
   d4a70:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4a72:	4770      	bx	lr

000d4a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a76:	460c      	mov	r4, r1
   d4a78:	ad02      	add	r5, sp, #8
   d4a7a:	f854 3b04 	ldr.w	r3, [r4], #4
   d4a7e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4a82:	4606      	mov	r6, r0
   d4a84:	460f      	mov	r7, r1
   d4a86:	a801      	add	r0, sp, #4
   d4a88:	4621      	mov	r1, r4
   d4a8a:	f7ff ffec 	bl	d4a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4a8e:	4629      	mov	r1, r5
   d4a90:	4630      	mov	r0, r6
   d4a92:	f7ff ffd7 	bl	d4a44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a96:	a801      	add	r0, sp, #4
   d4a98:	f7ff ffbe 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a9c:	4620      	mov	r0, r4
   d4a9e:	f7ff ffbb 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4aa2:	4638      	mov	r0, r7
   d4aa4:	2108      	movs	r1, #8
   d4aa6:	f000 ffd4 	bl	d5a52 <_ZdlPvj>
        return p;
    }
   d4aaa:	4630      	mov	r0, r6
   d4aac:	b003      	add	sp, #12
   d4aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ab0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4ab0:	b513      	push	{r0, r1, r4, lr}
   d4ab2:	460b      	mov	r3, r1
   d4ab4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ab6:	c803      	ldmia	r0, {r0, r1}
   d4ab8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4abc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ac0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ac4:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ac8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4acc:	b002      	add	sp, #8
   d4ace:	bd10      	pop	{r4, pc}

000d4ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ad0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ad2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ad4:	b90a      	cbnz	r2, d4ada <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ad6:	f000 ffbe 	bl	d5a56 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ada:	68c3      	ldr	r3, [r0, #12]
    }
   d4adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ae0:	4718      	bx	r3

000d4ae2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ae2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ae4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4ae6:	f100 0110 	add.w	r1, r0, #16
   d4aea:	f7ff fff1 	bl	d4ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4aee:	bd08      	pop	{r3, pc}

000d4af0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4af0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4af2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4af4:	b90a      	cbnz	r2, d4afa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4af6:	f000 ffae 	bl	d5a56 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4afa:	68c3      	ldr	r3, [r0, #12]
    }
   d4afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4b00:	4718      	bx	r3

000d4b02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4b02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4b06:	f100 0110 	add.w	r1, r0, #16
   d4b0a:	f7ff fff1 	bl	d4af0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4b0e:	bd08      	pop	{r3, pc}

000d4b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b10:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b12:	2300      	movs	r3, #0
   d4b14:	6083      	str	r3, [r0, #8]
   d4b16:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b18:	4604      	mov	r4, r0
   d4b1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b1c:	b12b      	cbz	r3, d4b2a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b1e:	2202      	movs	r2, #2
   d4b20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b22:	68eb      	ldr	r3, [r5, #12]
   d4b24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b26:	68ab      	ldr	r3, [r5, #8]
   d4b28:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4b34:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4b38:	b086      	sub	sp, #24
   d4b3a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b3c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b40:	808b      	strh	r3, [r1, #4]
   d4b42:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b44:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4b46:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b4a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4b4c:	f04f 0002 	mov.w	r0, #2
   d4b50:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4b54:	4299      	cmp	r1, r3
   d4b56:	d103      	bne.n	d4b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4b58:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4b5c:	2d00      	cmp	r5, #0
   d4b5e:	d1f7      	bne.n	d4b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4b60:	d002      	beq.n	d4b68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4b62:	f88d 1000 	strb.w	r1, [sp]
   d4b66:	e06b      	b.n	d4c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4b68:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b6c:	bf1e      	ittt	ne
   d4b6e:	60e7      	strne	r7, [r4, #12]
   d4b70:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b72:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4b74:	2301      	movs	r3, #1
   d4b76:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b7a:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4b7c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b7e:	f104 0308 	add.w	r3, r4, #8
   d4b82:	f3bf 8f5f 	dmb	sy
   d4b86:	e853 6f00 	ldrex	r6, [r3]
   d4b8a:	e843 0200 	strex	r2, r0, [r3]
   d4b8e:	2a00      	cmp	r2, #0
   d4b90:	d1f9      	bne.n	d4b86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4b92:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4b96:	2e00      	cmp	r6, #0
   d4b98:	d052      	beq.n	d4c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4b9a:	f7ff fde1 	bl	d4760 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4b9e:	b120      	cbz	r0, d4baa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4ba0:	4629      	mov	r1, r5
   d4ba2:	4630      	mov	r0, r6
   d4ba4:	f7ff ff94 	bl	d4ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4ba8:	e043      	b.n	d4c32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4baa:	4631      	mov	r1, r6
   d4bac:	4668      	mov	r0, sp
   d4bae:	f7ff ffaf 	bl	d4b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4bb2:	68e0      	ldr	r0, [r4, #12]
   d4bb4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4bb8:	b108      	cbz	r0, d4bbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4bba:	f001 f8e1 	bl	d5d80 <strdup>
   d4bbe:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4bc0:	2010      	movs	r0, #16
   d4bc2:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4bc6:	f7ff fa66 	bl	d4096 <_Znwj>
   d4bca:	4605      	mov	r5, r0
   d4bcc:	b330      	cbz	r0, d4c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bce:	f04f 0800 	mov.w	r8, #0
   d4bd2:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4bd6:	2018      	movs	r0, #24
   d4bd8:	f7ff fa5d 	bl	d4096 <_Znwj>
   d4bdc:	4604      	mov	r4, r0
   d4bde:	b1c0      	cbz	r0, d4c12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4be0:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4be4:	4601      	mov	r1, r0
   d4be6:	4668      	mov	r0, sp
   d4be8:	f7ff ff62 	bl	d4ab0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bec:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4bee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bf0:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bf2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4bf4:	9202      	str	r2, [sp, #8]
   d4bf6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bf8:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4bfa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4bfe:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c00:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4c04:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c08:	9b04      	ldr	r3, [sp, #16]
   d4c0a:	9203      	str	r2, [sp, #12]
   d4c0c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c0e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c12:	4b0e      	ldr	r3, [pc, #56]	; (d4c4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d4c14:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c16:	4b0e      	ldr	r3, [pc, #56]	; (d4c50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c18:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c1a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4c1c:	9804      	ldr	r0, [sp, #16]
   d4c1e:	f7ff fe35 	bl	d488c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c22:	4668      	mov	r0, sp
   d4c24:	f7ff fecd 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c28:	2200      	movs	r2, #0
   d4c2a:	4629      	mov	r1, r5
   d4c2c:	4809      	ldr	r0, [pc, #36]	; (d4c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d4c2e:	f7ff fd9f 	bl	d4770 <application_thread_invoke>
   d4c32:	4630      	mov	r0, r6
   d4c34:	f7ff fec5 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c38:	2110      	movs	r1, #16
   d4c3a:	4630      	mov	r0, r6
   d4c3c:	f000 ff09 	bl	d5a52 <_ZdlPvj>
   d4c40:	4638      	mov	r0, r7
   d4c42:	f7ff fe23 	bl	d488c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d4c46:	b006      	add	sp, #24
   d4c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c4c:	000d4ae3 	.word	0x000d4ae3
   d4c50:	000d4d41 	.word	0x000d4d41
   d4c54:	000d48d3 	.word	0x000d48d3

000d4c58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c5c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c5e:	ad07      	add	r5, sp, #28
   d4c60:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c64:	4606      	mov	r6, r0
   d4c66:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4c68:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c6a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4c6c:	460f      	mov	r7, r1
   d4c6e:	4690      	mov	r8, r2
   d4c70:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c74:	f8c5 b004 	str.w	fp, [r5, #4]
   d4c78:	f8c5 b008 	str.w	fp, [r5, #8]
   d4c7c:	9307      	str	r3, [sp, #28]
   d4c7e:	f7ff fa0a 	bl	d4096 <_Znwj>
   d4c82:	4604      	mov	r4, r0
   d4c84:	b138      	cbz	r0, d4c96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4c86:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c8a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c8e:	f8c0 b004 	str.w	fp, [r0, #4]
   d4c92:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c96:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c98:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4c9a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c9c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4c9e:	f7ff f9fa 	bl	d4096 <_Znwj>
   d4ca2:	b128      	cbz	r0, d4cb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4ca4:	2301      	movs	r3, #1
   d4ca6:	6043      	str	r3, [r0, #4]
   d4ca8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4caa:	4b23      	ldr	r3, [pc, #140]	; (d4d38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d4cac:	6003      	str	r3, [r0, #0]
   d4cae:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4cb0:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4cb2:	4b22      	ldr	r3, [pc, #136]	; (d4d3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d4cb4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4cb6:	2008      	movs	r0, #8
   d4cb8:	f7ff f9ed 	bl	d4096 <_Znwj>
   d4cbc:	4604      	mov	r4, r0
   d4cbe:	b128      	cbz	r0, d4ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4cc0:	9b03      	ldr	r3, [sp, #12]
   d4cc2:	f840 3b04 	str.w	r3, [r0], #4
   d4cc6:	a904      	add	r1, sp, #16
   d4cc8:	f7ff fecd 	bl	d4a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ccc:	9500      	str	r5, [sp, #0]
   d4cce:	fa5f f38a 	uxtb.w	r3, sl
   d4cd2:	464a      	mov	r2, r9
   d4cd4:	4641      	mov	r1, r8
   d4cd6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4cd8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4cda:	f7ff fd6f 	bl	d47bc <spark_send_event>
   d4cde:	b9b8      	cbnz	r0, d4d10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4ce0:	9b03      	ldr	r3, [sp, #12]
   d4ce2:	785b      	ldrb	r3, [r3, #1]
   d4ce4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4ce8:	b993      	cbnz	r3, d4d10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4cea:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4cee:	a905      	add	r1, sp, #20
   d4cf0:	a803      	add	r0, sp, #12
   d4cf2:	9205      	str	r2, [sp, #20]
   d4cf4:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4cf8:	f7ff ff1a 	bl	d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4cfc:	9805      	ldr	r0, [sp, #20]
   d4cfe:	f7ff fdc5 	bl	d488c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4d02:	a805      	add	r0, sp, #20
   d4d04:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4d06:	f7ff feb5 	bl	d4a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d0a:	a806      	add	r0, sp, #24
   d4d0c:	f7ff fe84 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d10:	9b03      	ldr	r3, [sp, #12]
   d4d12:	9305      	str	r3, [sp, #20]
   d4d14:	a904      	add	r1, sp, #16
   d4d16:	a806      	add	r0, sp, #24
   d4d18:	f7ff fea5 	bl	d4a66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4d1c:	a905      	add	r1, sp, #20
   d4d1e:	4630      	mov	r0, r6
   d4d20:	f7ff fe90 	bl	d4a44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d24:	a806      	add	r0, sp, #24
   d4d26:	f7ff fe77 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d2a:	a804      	add	r0, sp, #16
   d4d2c:	f7ff fe74 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4d30:	4630      	mov	r0, r6
   d4d32:	b00b      	add	sp, #44	; 0x2c
   d4d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d38:	000d5ebc 	.word	0x000d5ebc
   d4d3c:	000d4ead 	.word	0x000d4ead

000d4d40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d40:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d44:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4d46:	d006      	beq.n	d4d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4d48:	2a03      	cmp	r2, #3
   d4d4a:	d017      	beq.n	d4d7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4d4c:	2a01      	cmp	r2, #1
   d4d4e:	d121      	bne.n	d4d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d50:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d52:	6003      	str	r3, [r0, #0]
	      break;
   d4d54:	e01e      	b.n	d4d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d56:	2018      	movs	r0, #24
   d4d58:	680e      	ldr	r6, [r1, #0]
   d4d5a:	f7ff f99c 	bl	d4096 <_Znwj>
   d4d5e:	4605      	mov	r5, r0
   d4d60:	b150      	cbz	r0, d4d78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d62:	4631      	mov	r1, r6
   d4d64:	f7ff fed4 	bl	d4b10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4d68:	6930      	ldr	r0, [r6, #16]
   d4d6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4d6e:	b108      	cbz	r0, d4d74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4d70:	f001 f806 	bl	d5d80 <strdup>
   d4d74:	6128      	str	r0, [r5, #16]
   d4d76:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d78:	6025      	str	r5, [r4, #0]
   d4d7a:	e00b      	b.n	d4d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d7c:	6804      	ldr	r4, [r0, #0]
   d4d7e:	b14c      	cbz	r4, d4d94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4d80:	6920      	ldr	r0, [r4, #16]
   d4d82:	f7ff fd83 	bl	d488c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d86:	4620      	mov	r0, r4
   d4d88:	f7ff fe1b 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d8c:	2118      	movs	r1, #24
   d4d8e:	4620      	mov	r0, r4
   d4d90:	f000 fe5f 	bl	d5a52 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d94:	2000      	movs	r0, #0
   d4d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d98 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d98:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d9a:	2300      	movs	r3, #0
   d4d9c:	6083      	str	r3, [r0, #8]
   d4d9e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4da0:	4604      	mov	r4, r0
   d4da2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4da4:	b12b      	cbz	r3, d4db2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4da6:	2202      	movs	r2, #2
   d4da8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4daa:	68eb      	ldr	r3, [r5, #12]
   d4dac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4dae:	68ab      	ldr	r3, [r5, #8]
   d4db0:	60a3      	str	r3, [r4, #8]
	}
    }
   d4db2:	4620      	mov	r0, r4
   d4db4:	bd38      	pop	{r3, r4, r5, pc}

000d4db6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4db6:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4db8:	b570      	push	{r4, r5, r6, lr}
   d4dba:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4dbc:	d006      	beq.n	d4dcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4dbe:	2a03      	cmp	r2, #3
   d4dc0:	d011      	beq.n	d4de6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4dc2:	2a01      	cmp	r2, #1
   d4dc4:	d118      	bne.n	d4df8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4dc6:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4dc8:	6003      	str	r3, [r0, #0]
	      break;
   d4dca:	e015      	b.n	d4df8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4dcc:	2014      	movs	r0, #20
   d4dce:	680e      	ldr	r6, [r1, #0]
   d4dd0:	f7ff f961 	bl	d4096 <_Znwj>
   d4dd4:	4605      	mov	r5, r0
   d4dd6:	b120      	cbz	r0, d4de2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4dd8:	4631      	mov	r1, r6
   d4dda:	f7ff ffdd 	bl	d4d98 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4dde:	7c33      	ldrb	r3, [r6, #16]
   d4de0:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4de2:	6025      	str	r5, [r4, #0]
   d4de4:	e008      	b.n	d4df8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4de6:	6804      	ldr	r4, [r0, #0]
   d4de8:	b134      	cbz	r4, d4df8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dea:	4620      	mov	r0, r4
   d4dec:	f7ff fde9 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4df0:	2114      	movs	r1, #20
   d4df2:	4620      	mov	r0, r4
   d4df4:	f000 fe2d 	bl	d5a52 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4df8:	2000      	movs	r0, #0
   d4dfa:	bd70      	pop	{r4, r5, r6, pc}

000d4dfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4dfc:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4dfe:	2300      	movs	r3, #0
   d4e00:	b087      	sub	sp, #28
   d4e02:	460c      	mov	r4, r1
   d4e04:	f3bf 8f5f 	dmb	sy
   d4e08:	e850 6f00 	ldrex	r6, [r0]
   d4e0c:	e840 3200 	strex	r2, r3, [r0]
   d4e10:	2a00      	cmp	r2, #0
   d4e12:	d1f9      	bne.n	d4e08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4e14:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4e18:	2e00      	cmp	r6, #0
   d4e1a:	d03f      	beq.n	d4e9c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4e1c:	4618      	mov	r0, r3
   d4e1e:	f7ff fc9f 	bl	d4760 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4e22:	4607      	mov	r7, r0
   d4e24:	b120      	cbz	r0, d4e30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e26:	4621      	mov	r1, r4
   d4e28:	4630      	mov	r0, r6
   d4e2a:	f7ff fe61 	bl	d4af0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4e2e:	e02e      	b.n	d4e8e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e30:	4631      	mov	r1, r6
   d4e32:	a801      	add	r0, sp, #4
   d4e34:	f7ff ffb0 	bl	d4d98 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e38:	7823      	ldrb	r3, [r4, #0]
   d4e3a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e3e:	2010      	movs	r0, #16
   d4e40:	f7ff f929 	bl	d4096 <_Znwj>
   d4e44:	4605      	mov	r5, r0
   d4e46:	b1d0      	cbz	r0, d4e7e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e48:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e4a:	2014      	movs	r0, #20
   d4e4c:	f7ff f923 	bl	d4096 <_Znwj>
   d4e50:	4604      	mov	r4, r0
   d4e52:	b178      	cbz	r0, d4e74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e54:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4e56:	4601      	mov	r1, r0
   d4e58:	a801      	add	r0, sp, #4
   d4e5a:	f7ff fe29 	bl	d4ab0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e5e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4e60:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e62:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e64:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4e66:	9203      	str	r2, [sp, #12]
   d4e68:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e6a:	60e3      	str	r3, [r4, #12]
   d4e6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e70:	9204      	str	r2, [sp, #16]
   d4e72:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4e74:	4b0a      	ldr	r3, [pc, #40]	; (d4ea0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4e76:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e78:	4b0a      	ldr	r3, [pc, #40]	; (d4ea4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e7a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4e7c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e7e:	a801      	add	r0, sp, #4
   d4e80:	f7ff fd9f 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e84:	2200      	movs	r2, #0
   d4e86:	4629      	mov	r1, r5
   d4e88:	4807      	ldr	r0, [pc, #28]	; (d4ea8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4e8a:	f7ff fc71 	bl	d4770 <application_thread_invoke>
   d4e8e:	4630      	mov	r0, r6
   d4e90:	f7ff fd97 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e94:	2110      	movs	r1, #16
   d4e96:	4630      	mov	r0, r6
   d4e98:	f000 fddb 	bl	d5a52 <_ZdlPvj>
        }
    }
   d4e9c:	b007      	add	sp, #28
   d4e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ea0:	000d4b03 	.word	0x000d4b03
   d4ea4:	000d4db7 	.word	0x000d4db7
   d4ea8:	000d48d3 	.word	0x000d48d3

000d4eac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4eac:	b530      	push	{r4, r5, lr}
   d4eae:	b085      	sub	sp, #20
   d4eb0:	4604      	mov	r4, r0
   d4eb2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4eb4:	4668      	mov	r0, sp
   d4eb6:	4611      	mov	r1, r2
   d4eb8:	f7ff fddc 	bl	d4a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4ebc:	b17c      	cbz	r4, d4ede <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4ebe:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4ec0:	4628      	mov	r0, r5
   d4ec2:	b10d      	cbz	r5, d4ec8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4ec4:	f000 ff5c 	bl	d5d80 <strdup>
   d4ec8:	9002      	str	r0, [sp, #8]
   d4eca:	a902      	add	r1, sp, #8
   d4ecc:	4668      	mov	r0, sp
   d4ece:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4ed2:	f7ff fe2d 	bl	d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4ed6:	9802      	ldr	r0, [sp, #8]
   d4ed8:	f7ff fcd8 	bl	d488c <free>
   d4edc:	e01d      	b.n	d4f1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4ede:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4ee0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4ee4:	f04f 0201 	mov.w	r2, #1
   d4ee8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4eec:	42a3      	cmp	r3, r4
   d4eee:	d103      	bne.n	d4ef8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4ef0:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4ef4:	2900      	cmp	r1, #0
   d4ef6:	d1f7      	bne.n	d4ee8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4ef8:	d002      	beq.n	d4f00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4efa:	f88d 3008 	strb.w	r3, [sp, #8]
   d4efe:	e00c      	b.n	d4f1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4f00:	f110 010c 	adds.w	r1, r0, #12
   d4f04:	f04f 0301 	mov.w	r3, #1
   d4f08:	bf18      	it	ne
   d4f0a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f0c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4f10:	3004      	adds	r0, #4
   d4f12:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4f16:	f7ff ff71 	bl	d4dfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4f1a:	a801      	add	r0, sp, #4
   d4f1c:	f7ff fd7c 	bl	d4a18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4f20:	b005      	add	sp, #20
   d4f22:	bd30      	pop	{r4, r5, pc}

000d4f24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f24:	2200      	movs	r2, #0
   d4f26:	4611      	mov	r1, r2
   d4f28:	6840      	ldr	r0, [r0, #4]
   d4f2a:	f7ff bc8f 	b.w	d484c <network_listening>

000d4f2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f2e:	2200      	movs	r2, #0
   d4f30:	4611      	mov	r1, r2
   d4f32:	6840      	ldr	r0, [r0, #4]
   d4f34:	f7ff bc9a 	b.w	d486c <network_get_listen_timeout>

000d4f38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f38:	2200      	movs	r2, #0
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	f7ff bc8e 	b.w	d485c <network_set_listen_timeout>

000d4f40 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f40:	2200      	movs	r2, #0
   d4f42:	f081 0101 	eor.w	r1, r1, #1
   d4f46:	6840      	ldr	r0, [r0, #4]
   d4f48:	f7ff bc78 	b.w	d483c <network_listen>

000d4f4c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f4c:	2300      	movs	r3, #0
   d4f4e:	461a      	mov	r2, r3
   d4f50:	4619      	mov	r1, r3
   d4f52:	6840      	ldr	r0, [r0, #4]
   d4f54:	f7ff bc6a 	b.w	d482c <network_off>

000d4f58 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f58:	2300      	movs	r3, #0
   d4f5a:	461a      	mov	r2, r3
   d4f5c:	4619      	mov	r1, r3
   d4f5e:	6840      	ldr	r0, [r0, #4]
   d4f60:	f7ff bc5c 	b.w	d481c <network_on>

000d4f64 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f64:	2200      	movs	r2, #0
   d4f66:	4611      	mov	r1, r2
   d4f68:	6840      	ldr	r0, [r0, #4]
   d4f6a:	f7ff bc4f 	b.w	d480c <network_ready>

000d4f6e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f6e:	2200      	movs	r2, #0
   d4f70:	4611      	mov	r1, r2
   d4f72:	6840      	ldr	r0, [r0, #4]
   d4f74:	f7ff bc3a 	b.w	d47ec <network_connecting>

000d4f78 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f78:	2200      	movs	r2, #0
   d4f7a:	2102      	movs	r1, #2
   d4f7c:	6840      	ldr	r0, [r0, #4]
   d4f7e:	f7ff bc3d 	b.w	d47fc <network_disconnect>

000d4f82 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f82:	2300      	movs	r3, #0
   d4f84:	461a      	mov	r2, r3
   d4f86:	6840      	ldr	r0, [r0, #4]
   d4f88:	f7ff bc28 	b.w	d47dc <network_connect>

000d4f8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4f8c:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f8e:	2203      	movs	r2, #3
   d4f90:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4f92:	4a02      	ldr	r2, [pc, #8]	; (d4f9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4f94:	601a      	str	r2, [r3, #0]
   d4f96:	4770      	bx	lr
   d4f98:	2003e3d8 	.word	0x2003e3d8
   d4f9c:	000d5ed8 	.word	0x000d5ed8

000d4fa0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4fa0:	4770      	bx	lr

000d4fa2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fa4:	4606      	mov	r6, r0
   d4fa6:	4615      	mov	r5, r2
   d4fa8:	460c      	mov	r4, r1
   d4faa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4fac:	42bc      	cmp	r4, r7
   d4fae:	d006      	beq.n	d4fbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4fb0:	6833      	ldr	r3, [r6, #0]
   d4fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4fb6:	689b      	ldr	r3, [r3, #8]
   d4fb8:	4630      	mov	r0, r6
   d4fba:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4fbc:	e7f6      	b.n	d4fac <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4fbe:	4628      	mov	r0, r5
   d4fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fc2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	7c00      	ldrb	r0, [r0, #16]
   d4fc6:	f7ff bafb 	b.w	d45c0 <HAL_I2C_Write_Data>

000d4fca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4fca:	2100      	movs	r1, #0
   d4fcc:	7c00      	ldrb	r0, [r0, #16]
   d4fce:	f7ff baff 	b.w	d45d0 <HAL_I2C_Available_Data>

000d4fd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4fd2:	2100      	movs	r1, #0
   d4fd4:	7c00      	ldrb	r0, [r0, #16]
   d4fd6:	f7ff bb03 	b.w	d45e0 <HAL_I2C_Read_Data>

000d4fda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4fda:	2100      	movs	r1, #0
   d4fdc:	7c00      	ldrb	r0, [r0, #16]
   d4fde:	f7ff bb07 	b.w	d45f0 <HAL_I2C_Peek_Data>

000d4fe2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4fe2:	2100      	movs	r1, #0
   d4fe4:	7c00      	ldrb	r0, [r0, #16]
   d4fe6:	f7ff bb0b 	b.w	d4600 <HAL_I2C_Flush_Data>

000d4fea <_ZN7TwoWireD0Ev>:
   d4fea:	b510      	push	{r4, lr}
   d4fec:	2114      	movs	r1, #20
   d4fee:	4604      	mov	r4, r0
   d4ff0:	f000 fd2f 	bl	d5a52 <_ZdlPvj>
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	bd10      	pop	{r4, pc}

000d4ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ff8:	b510      	push	{r4, lr}
   d4ffa:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5000:	4608      	mov	r0, r1
   d5002:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5004:	2100      	movs	r1, #0
   d5006:	4b04      	ldr	r3, [pc, #16]	; (d5018 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5008:	7420      	strb	r0, [r4, #16]
   d500a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d500c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d500e:	f7ff faff 	bl	d4610 <HAL_I2C_Init>

}
   d5012:	4620      	mov	r0, r4
   d5014:	bd10      	pop	{r4, pc}
   d5016:	bf00      	nop
   d5018:	000d5f0c 	.word	0x000d5f0c

000d501c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d501c:	2300      	movs	r3, #0
   d501e:	461a      	mov	r2, r3
   d5020:	4619      	mov	r1, r3
   d5022:	7c00      	ldrb	r0, [r0, #16]
   d5024:	f7ff baac 	b.w	d4580 <HAL_I2C_Begin>

000d5028 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5028:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d502a:	2400      	movs	r4, #0
   d502c:	7c00      	ldrb	r0, [r0, #16]
   d502e:	9400      	str	r4, [sp, #0]
   d5030:	f7ff faae 	bl	d4590 <HAL_I2C_Request_Data>
  return result;
}
   d5034:	b2c0      	uxtb	r0, r0
   d5036:	b002      	add	sp, #8
   d5038:	bd10      	pop	{r4, pc}

000d503a <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d503a:	2301      	movs	r3, #1
   d503c:	b2d2      	uxtb	r2, r2
   d503e:	b2c9      	uxtb	r1, r1
   d5040:	f7ff bff2 	b.w	d5028 <_ZN7TwoWire11requestFromEhhh>

000d5044 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5044:	2200      	movs	r2, #0
   d5046:	7c00      	ldrb	r0, [r0, #16]
   d5048:	f7ff baaa 	b.w	d45a0 <HAL_I2C_Begin_Transmission>

000d504c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d504c:	b2c9      	uxtb	r1, r1
   d504e:	f7ff bff9 	b.w	d5044 <_ZN7TwoWire17beginTransmissionEh>

000d5052 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5052:	2200      	movs	r2, #0
   d5054:	7c00      	ldrb	r0, [r0, #16]
   d5056:	f7ff baab 	b.w	d45b0 <HAL_I2C_End_Transmission>

000d505a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d505a:	2101      	movs	r1, #1
   d505c:	f7ff bff9 	b.w	d5052 <_ZN7TwoWire15endTransmissionEh>

000d5060 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5060:	4770      	bx	lr

000d5062 <_ZN9IPAddressD0Ev>:
   d5062:	b510      	push	{r4, lr}
   d5064:	2118      	movs	r1, #24
   d5066:	4604      	mov	r4, r0
   d5068:	f000 fcf3 	bl	d5a52 <_ZdlPvj>
   d506c:	4620      	mov	r0, r4
   d506e:	bd10      	pop	{r4, pc}

000d5070 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5070:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5072:	7d03      	ldrb	r3, [r0, #20]
   d5074:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5076:	b08d      	sub	sp, #52	; 0x34
   d5078:	460e      	mov	r6, r1
   d507a:	f100 0704 	add.w	r7, r0, #4
   d507e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5082:	d002      	beq.n	d508a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5084:	f100 0508 	add.w	r5, r0, #8
   d5088:	e018      	b.n	d50bc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d508a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d508c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d508e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5092:	232f      	movs	r3, #47	; 0x2f
   d5094:	462a      	mov	r2, r5
   d5096:	200a      	movs	r0, #10
   d5098:	f7ff fac2 	bl	d4620 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d509c:	4628      	mov	r0, r5
   d509e:	f000 fe8a 	bl	d5db6 <strlen>
   d50a2:	6833      	ldr	r3, [r6, #0]
   d50a4:	4602      	mov	r2, r0
   d50a6:	68db      	ldr	r3, [r3, #12]
   d50a8:	4629      	mov	r1, r5
   d50aa:	4630      	mov	r0, r6
   d50ac:	4798      	blx	r3
   d50ae:	e00f      	b.n	d50d0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d50b0:	b124      	cbz	r4, d50bc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d50b2:	212e      	movs	r1, #46	; 0x2e
   d50b4:	4630      	mov	r0, r6
   d50b6:	f000 f9cb 	bl	d5450 <_ZN5Print5printEc>
   d50ba:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d50bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d50c0:	220a      	movs	r2, #10
   d50c2:	4630      	mov	r0, r6
   d50c4:	f000 fa0a 	bl	d54dc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50c8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50ca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50cc:	d1f0      	bne.n	d50b0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50ce:	4620      	mov	r0, r4
    }
    return n;
}
   d50d0:	b00d      	add	sp, #52	; 0x34
   d50d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50d4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4b05      	ldr	r3, [pc, #20]	; (d50ec <_ZN9IPAddressC1Ev+0x18>)
   d50d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d50da:	2211      	movs	r2, #17
   d50dc:	f840 3b04 	str.w	r3, [r0], #4
   d50e0:	2100      	movs	r1, #0
   d50e2:	f000 fe1c 	bl	d5d1e <memset>
{
    clear();
}
   d50e6:	4620      	mov	r0, r4
   d50e8:	bd10      	pop	{r4, pc}
   d50ea:	bf00      	nop
   d50ec:	000d5f34 	.word	0x000d5f34

000d50f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d50f0:	4603      	mov	r3, r0
   d50f2:	4a07      	ldr	r2, [pc, #28]	; (d5110 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d50f4:	b510      	push	{r4, lr}
   d50f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d50fa:	f101 0210 	add.w	r2, r1, #16
   d50fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d5102:	f843 4b04 	str.w	r4, [r3], #4
   d5106:	4291      	cmp	r1, r2
   d5108:	d1f9      	bne.n	d50fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d510a:	780a      	ldrb	r2, [r1, #0]
   d510c:	701a      	strb	r2, [r3, #0]
}
   d510e:	bd10      	pop	{r4, pc}
   d5110:	000d5f34 	.word	0x000d5f34

000d5114 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5114:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5116:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d511a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d511e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5122:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5126:	2304      	movs	r3, #4
   d5128:	6041      	str	r1, [r0, #4]
   d512a:	7503      	strb	r3, [r0, #20]
   d512c:	bd10      	pop	{r4, pc}

000d512e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d512e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5130:	780d      	ldrb	r5, [r1, #0]
   d5132:	788b      	ldrb	r3, [r1, #2]
   d5134:	784a      	ldrb	r2, [r1, #1]
   d5136:	78c9      	ldrb	r1, [r1, #3]
   d5138:	9100      	str	r1, [sp, #0]
   d513a:	4629      	mov	r1, r5
   d513c:	f7ff ffea 	bl	d5114 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5140:	b003      	add	sp, #12
   d5142:	bd30      	pop	{r4, r5, pc}

000d5144 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5144:	4b01      	ldr	r3, [pc, #4]	; (d514c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5146:	4a02      	ldr	r2, [pc, #8]	; (d5150 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5148:	601a      	str	r2, [r3, #0]
   d514a:	4770      	bx	lr
   d514c:	2003e3e0 	.word	0x2003e3e0
   d5150:	000d5ff8 	.word	0x000d5ff8

000d5154 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5154:	2200      	movs	r2, #0
   d5156:	4611      	mov	r1, r2
   d5158:	6840      	ldr	r0, [r0, #4]
   d515a:	f7ff bb77 	b.w	d484c <network_listening>

000d515e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d515e:	2200      	movs	r2, #0
   d5160:	4611      	mov	r1, r2
   d5162:	6840      	ldr	r0, [r0, #4]
   d5164:	f7ff bb82 	b.w	d486c <network_get_listen_timeout>

000d5168 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5168:	2200      	movs	r2, #0
   d516a:	6840      	ldr	r0, [r0, #4]
   d516c:	f7ff bb76 	b.w	d485c <network_set_listen_timeout>

000d5170 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5170:	2200      	movs	r2, #0
   d5172:	f081 0101 	eor.w	r1, r1, #1
   d5176:	6840      	ldr	r0, [r0, #4]
   d5178:	f7ff bb60 	b.w	d483c <network_listen>

000d517c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d517c:	2300      	movs	r3, #0
   d517e:	461a      	mov	r2, r3
   d5180:	4619      	mov	r1, r3
   d5182:	6840      	ldr	r0, [r0, #4]
   d5184:	f7ff bb52 	b.w	d482c <network_off>

000d5188 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5188:	2300      	movs	r3, #0
   d518a:	461a      	mov	r2, r3
   d518c:	4619      	mov	r1, r3
   d518e:	6840      	ldr	r0, [r0, #4]
   d5190:	f7ff bb44 	b.w	d481c <network_on>

000d5194 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5194:	2200      	movs	r2, #0
   d5196:	4611      	mov	r1, r2
   d5198:	6840      	ldr	r0, [r0, #4]
   d519a:	f7ff bb37 	b.w	d480c <network_ready>

000d519e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d519e:	2200      	movs	r2, #0
   d51a0:	4611      	mov	r1, r2
   d51a2:	6840      	ldr	r0, [r0, #4]
   d51a4:	f7ff bb22 	b.w	d47ec <network_connecting>

000d51a8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51a8:	2200      	movs	r2, #0
   d51aa:	2102      	movs	r1, #2
   d51ac:	6840      	ldr	r0, [r0, #4]
   d51ae:	f7ff bb25 	b.w	d47fc <network_disconnect>

000d51b2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51b2:	2300      	movs	r3, #0
   d51b4:	461a      	mov	r2, r3
   d51b6:	6840      	ldr	r0, [r0, #4]
   d51b8:	f7ff bb10 	b.w	d47dc <network_connect>

000d51bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d51bc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51be:	4605      	mov	r5, r0
   d51c0:	b188      	cbz	r0, d51e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51c2:	6804      	ldr	r4, [r0, #0]
   d51c4:	b14c      	cbz	r4, d51da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d51c6:	68a3      	ldr	r3, [r4, #8]
   d51c8:	b11b      	cbz	r3, d51d2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51ca:	2203      	movs	r2, #3
   d51cc:	4621      	mov	r1, r4
   d51ce:	4620      	mov	r0, r4
   d51d0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51d2:	2110      	movs	r1, #16
   d51d4:	4620      	mov	r0, r4
   d51d6:	f000 fc3c 	bl	d5a52 <_ZdlPvj>
   d51da:	4628      	mov	r0, r5
   d51dc:	2114      	movs	r1, #20
      }
   d51de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51e2:	f000 bc36 	b.w	d5a52 <_ZdlPvj>
   d51e6:	bd38      	pop	{r3, r4, r5, pc}

000d51e8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d51e8:	b110      	cbz	r0, d51f0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d51ea:	6803      	ldr	r3, [r0, #0]
   d51ec:	685b      	ldr	r3, [r3, #4]
   d51ee:	4718      	bx	r3
   d51f0:	4770      	bx	lr

000d51f2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d51f2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d51f4:	6803      	ldr	r3, [r0, #0]
   d51f6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d51f8:	b1bb      	cbz	r3, d522a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d51fa:	6858      	ldr	r0, [r3, #4]
   d51fc:	f7ff f980 	bl	d4500 <os_thread_is_current>
   d5200:	b978      	cbnz	r0, d5222 <_ZN6ThreadD1Ev+0x30>
   d5202:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5204:	7c5a      	ldrb	r2, [r3, #17]
   d5206:	b912      	cbnz	r2, d520e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5208:	6858      	ldr	r0, [r3, #4]
   d520a:	f7ff f981 	bl	d4510 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d520e:	6823      	ldr	r3, [r4, #0]
   d5210:	6858      	ldr	r0, [r3, #4]
   d5212:	f7ff f985 	bl	d4520 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5216:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5218:	2300      	movs	r3, #0
   d521a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d521c:	b128      	cbz	r0, d522a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d521e:	f7ff ffcd 	bl	d51bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5222:	6820      	ldr	r0, [r4, #0]
   d5224:	b108      	cbz	r0, d522a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5226:	f7ff ffc9 	bl	d51bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d522a:	4620      	mov	r0, r4
   d522c:	bd10      	pop	{r4, pc}
	...

000d5230 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5230:	b538      	push	{r3, r4, r5, lr}
   d5232:	4b0c      	ldr	r3, [pc, #48]	; (d5264 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5234:	6003      	str	r3, [r0, #0]
   d5236:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5238:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d523c:	b108      	cbz	r0, d5242 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d523e:	f7fe ff2e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5242:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5246:	b135      	cbz	r5, d5256 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5248:	4628      	mov	r0, r5
   d524a:	f7ff ffd2 	bl	d51f2 <_ZN6ThreadD1Ev>
   d524e:	2104      	movs	r1, #4
   d5250:	4628      	mov	r0, r5
   d5252:	f000 fbfe 	bl	d5a52 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5256:	68a0      	ldr	r0, [r4, #8]
   d5258:	b108      	cbz	r0, d525e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d525a:	f7ff ffc5 	bl	d51e8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d525e:	4620      	mov	r0, r4
   d5260:	bd38      	pop	{r3, r4, r5, pc}
   d5262:	bf00      	nop
   d5264:	000d602c 	.word	0x000d602c

000d5268 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5268:	b538      	push	{r3, r4, r5, lr}
   d526a:	4c0d      	ldr	r4, [pc, #52]	; (d52a0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d526c:	4b0d      	ldr	r3, [pc, #52]	; (d52a4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d526e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5270:	2500      	movs	r5, #0
   d5272:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5274:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5278:	6063      	str	r3, [r4, #4]
   d527a:	60a5      	str	r5, [r4, #8]
   d527c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5280:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5284:	f7ff f95c 	bl	d4540 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5288:	4b07      	ldr	r3, [pc, #28]	; (d52a8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d528a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d528e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5290:	4620      	mov	r0, r4
   d5292:	4a06      	ldr	r2, [pc, #24]	; (d52ac <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5294:	4906      	ldr	r1, [pc, #24]	; (d52b0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d529a:	f000 bbd5 	b.w	d5a48 <__aeabi_atexit>
   d529e:	bf00      	nop
   d52a0:	2003e3e4 	.word	0x2003e3e4
   d52a4:	000d6060 	.word	0x000d6060
   d52a8:	000d602c 	.word	0x000d602c
   d52ac:	2003e350 	.word	0x2003e350
   d52b0:	000d5231 	.word	0x000d5231

000d52b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d52b4:	2300      	movs	r3, #0
   d52b6:	461a      	mov	r2, r3
   d52b8:	6840      	ldr	r0, [r0, #4]
   d52ba:	f7ff ba8f 	b.w	d47dc <network_connect>

000d52be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d52be:	2200      	movs	r2, #0
   d52c0:	2102      	movs	r1, #2
   d52c2:	6840      	ldr	r0, [r0, #4]
   d52c4:	f7ff ba9a 	b.w	d47fc <network_disconnect>

000d52c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d52c8:	2200      	movs	r2, #0
   d52ca:	4611      	mov	r1, r2
   d52cc:	6840      	ldr	r0, [r0, #4]
   d52ce:	f7ff ba8d 	b.w	d47ec <network_connecting>

000d52d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d52d2:	2200      	movs	r2, #0
   d52d4:	4611      	mov	r1, r2
   d52d6:	6840      	ldr	r0, [r0, #4]
   d52d8:	f7ff ba98 	b.w	d480c <network_ready>

000d52dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d52dc:	2300      	movs	r3, #0
   d52de:	461a      	mov	r2, r3
   d52e0:	4619      	mov	r1, r3
   d52e2:	6840      	ldr	r0, [r0, #4]
   d52e4:	f7ff ba9a 	b.w	d481c <network_on>

000d52e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d52e8:	2300      	movs	r3, #0
   d52ea:	461a      	mov	r2, r3
   d52ec:	4619      	mov	r1, r3
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff ba9c 	b.w	d482c <network_off>

000d52f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d52f4:	2200      	movs	r2, #0
   d52f6:	f081 0101 	eor.w	r1, r1, #1
   d52fa:	6840      	ldr	r0, [r0, #4]
   d52fc:	f7ff ba9e 	b.w	d483c <network_listen>

000d5300 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5300:	2200      	movs	r2, #0
   d5302:	6840      	ldr	r0, [r0, #4]
   d5304:	f7ff baaa 	b.w	d485c <network_set_listen_timeout>

000d5308 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5308:	2200      	movs	r2, #0
   d530a:	4611      	mov	r1, r2
   d530c:	6840      	ldr	r0, [r0, #4]
   d530e:	f7ff baad 	b.w	d486c <network_get_listen_timeout>

000d5312 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5312:	2200      	movs	r2, #0
   d5314:	4611      	mov	r1, r2
   d5316:	6840      	ldr	r0, [r0, #4]
   d5318:	f7ff ba98 	b.w	d484c <network_listening>

000d531c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5320:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5322:	b095      	sub	sp, #84	; 0x54
   d5324:	4616      	mov	r6, r2
   d5326:	460d      	mov	r5, r1
   d5328:	4607      	mov	r7, r0
    IPAddress addr;
   d532a:	f7ff fed3 	bl	d50d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d532e:	4621      	mov	r1, r4
   d5330:	2220      	movs	r2, #32
   d5332:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5334:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5336:	f000 fcf2 	bl	d5d1e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d533a:	2340      	movs	r3, #64	; 0x40
   d533c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d533e:	4621      	mov	r1, r4
   d5340:	466b      	mov	r3, sp
   d5342:	aa0c      	add	r2, sp, #48	; 0x30
   d5344:	4630      	mov	r0, r6
   d5346:	f7ff f97b 	bl	d4640 <netdb_getaddrinfo>
    if (!r) {
   d534a:	4604      	mov	r4, r0
   d534c:	2800      	cmp	r0, #0
   d534e:	d144      	bne.n	d53da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5350:	4602      	mov	r2, r0
   d5352:	2101      	movs	r1, #1
   d5354:	6868      	ldr	r0, [r5, #4]
   d5356:	f7ff fa59 	bl	d480c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d535a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d535c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d535e:	4622      	mov	r2, r4
   d5360:	6868      	ldr	r0, [r5, #4]
   d5362:	f7ff fa53 	bl	d480c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5366:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5368:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d536a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d536c:	2e00      	cmp	r6, #0
   d536e:	d034      	beq.n	d53da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5370:	2900      	cmp	r1, #0
   d5372:	d132      	bne.n	d53da <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5374:	6873      	ldr	r3, [r6, #4]
   d5376:	2b02      	cmp	r3, #2
   d5378:	d002      	beq.n	d5380 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d537a:	2b0a      	cmp	r3, #10
   d537c:	d009      	beq.n	d5392 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d537e:	e02a      	b.n	d53d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5380:	f1b8 0f00 	cmp.w	r8, #0
   d5384:	d027      	beq.n	d53d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5386:	6971      	ldr	r1, [r6, #20]
   d5388:	4638      	mov	r0, r7
   d538a:	3104      	adds	r1, #4
   d538c:	f7ff fecf 	bl	d512e <_ZN9IPAddressaSEPKh>
   d5390:	e020      	b.n	d53d4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5392:	f1b9 0f00 	cmp.w	r9, #0
   d5396:	d01e      	beq.n	d53d6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5398:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d539a:	2211      	movs	r2, #17
   d539c:	a801      	add	r0, sp, #4
   d539e:	f000 fcbe 	bl	d5d1e <memset>
                    a.v = 6;
   d53a2:	2306      	movs	r3, #6
   d53a4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d53a8:	ad01      	add	r5, sp, #4
   d53aa:	f104 0308 	add.w	r3, r4, #8
   d53ae:	3418      	adds	r4, #24
   d53b0:	6818      	ldr	r0, [r3, #0]
   d53b2:	6859      	ldr	r1, [r3, #4]
   d53b4:	462a      	mov	r2, r5
   d53b6:	c203      	stmia	r2!, {r0, r1}
   d53b8:	3308      	adds	r3, #8
   d53ba:	42a3      	cmp	r3, r4
   d53bc:	4615      	mov	r5, r2
   d53be:	d1f7      	bne.n	d53b0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d53c0:	a901      	add	r1, sp, #4
   d53c2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d53c4:	ad07      	add	r5, sp, #28
   d53c6:	f7ff fe93 	bl	d50f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d53ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53cc:	1d3c      	adds	r4, r7, #4
   d53ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53d0:	682b      	ldr	r3, [r5, #0]
   d53d2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d53d4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d53d6:	69f6      	ldr	r6, [r6, #28]
   d53d8:	e7c8      	b.n	d536c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d53da:	9800      	ldr	r0, [sp, #0]
   d53dc:	f7ff f928 	bl	d4630 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d53e0:	4638      	mov	r0, r7
   d53e2:	b015      	add	sp, #84	; 0x54
   d53e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d53e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d53e8:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d53ea:	4a03      	ldr	r2, [pc, #12]	; (d53f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d53ec:	601a      	str	r2, [r3, #0]
   d53ee:	2200      	movs	r2, #0
   d53f0:	605a      	str	r2, [r3, #4]
   d53f2:	4770      	bx	lr
   d53f4:	2003e5b4 	.word	0x2003e5b4
   d53f8:	000d6060 	.word	0x000d6060

000d53fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53fe:	4606      	mov	r6, r0
   d5400:	460d      	mov	r5, r1
   d5402:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5404:	2400      	movs	r4, #0
  while (size--) {
   d5406:	42bd      	cmp	r5, r7
   d5408:	d00c      	beq.n	d5424 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d540a:	6833      	ldr	r3, [r6, #0]
   d540c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5410:	689b      	ldr	r3, [r3, #8]
   d5412:	4630      	mov	r0, r6
   d5414:	4798      	blx	r3
     if (chunk>=0)
   d5416:	2800      	cmp	r0, #0
   d5418:	db01      	blt.n	d541e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d541a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d541c:	e7f3      	b.n	d5406 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d541e:	2c00      	cmp	r4, #0
   d5420:	bf08      	it	eq
   d5422:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5424:	4620      	mov	r0, r4
   d5426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5428 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5428:	b570      	push	{r4, r5, r6, lr}
   d542a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d542c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d542e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5430:	b149      	cbz	r1, d5446 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5432:	f000 fcc0 	bl	d5db6 <strlen>
   d5436:	682b      	ldr	r3, [r5, #0]
   d5438:	4602      	mov	r2, r0
   d543a:	4621      	mov	r1, r4
   d543c:	4628      	mov	r0, r5
   d543e:	68db      	ldr	r3, [r3, #12]
    }
   d5440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5444:	4718      	bx	r3
    }
   d5446:	bd70      	pop	{r4, r5, r6, pc}

000d5448 <_ZN5Print5printEPKc>:
   d5448:	b508      	push	{r3, lr}
   d544a:	f7ff ffed 	bl	d5428 <_ZN5Print5writeEPKc>
   d544e:	bd08      	pop	{r3, pc}

000d5450 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5450:	6803      	ldr	r3, [r0, #0]
   d5452:	689b      	ldr	r3, [r3, #8]
   d5454:	4718      	bx	r3

000d5456 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5456:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5458:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d545a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d545c:	f7ff fff8 	bl	d5450 <_ZN5Print5printEc>
  n += print('\n');
   d5460:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5462:	4604      	mov	r4, r0
  n += print('\n');
   d5464:	4628      	mov	r0, r5
   d5466:	f7ff fff3 	bl	d5450 <_ZN5Print5printEc>
  return n;
}
   d546a:	4420      	add	r0, r4
   d546c:	bd38      	pop	{r3, r4, r5, pc}

000d546e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d546e:	b538      	push	{r3, r4, r5, lr}
   d5470:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5472:	f7ff ffd9 	bl	d5428 <_ZN5Print5writeEPKc>
   d5476:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5478:	4628      	mov	r0, r5
   d547a:	f7ff ffec 	bl	d5456 <_ZN5Print7printlnEv>
  return n;
}
   d547e:	4420      	add	r0, r4
   d5480:	bd38      	pop	{r3, r4, r5, pc}

000d5482 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5482:	b530      	push	{r4, r5, lr}
   d5484:	b08b      	sub	sp, #44	; 0x2c
   d5486:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5488:	2100      	movs	r1, #0
   d548a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d548e:	2a01      	cmp	r2, #1
   d5490:	bf98      	it	ls
   d5492:	220a      	movls	r2, #10
   d5494:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5498:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d549c:	fb05 3312 	mls	r3, r5, r2, r3
   d54a0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d54a4:	2b09      	cmp	r3, #9
   d54a6:	bf94      	ite	ls
   d54a8:	3330      	addls	r3, #48	; 0x30
   d54aa:	3337      	addhi	r3, #55	; 0x37
   d54ac:	b2db      	uxtb	r3, r3
   d54ae:	4621      	mov	r1, r4
   d54b0:	f804 3901 	strb.w	r3, [r4], #-1
   d54b4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d54b6:	2d00      	cmp	r5, #0
   d54b8:	d1ee      	bne.n	d5498 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d54ba:	f7ff ffb5 	bl	d5428 <_ZN5Print5writeEPKc>
}
   d54be:	b00b      	add	sp, #44	; 0x2c
   d54c0:	bd30      	pop	{r4, r5, pc}

000d54c2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d54c2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d54c4:	b92a      	cbnz	r2, d54d2 <_ZN5Print5printEmi+0x10>
   d54c6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d54c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d54cc:	689b      	ldr	r3, [r3, #8]
   d54ce:	b2c9      	uxtb	r1, r1
   d54d0:	4718      	bx	r3
  else return printNumber(n, base);
   d54d2:	b2d2      	uxtb	r2, r2
}
   d54d4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d54d8:	f7ff bfd3 	b.w	d5482 <_ZN5Print11printNumberEmh>

000d54dc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d54dc:	f7ff bff1 	b.w	d54c2 <_ZN5Print5printEmi>

000d54e0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d54e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d54e4:	4607      	mov	r7, r0
   d54e6:	460e      	mov	r6, r1
  if (base == 0) {
   d54e8:	4615      	mov	r5, r2
   d54ea:	b92a      	cbnz	r2, d54f8 <_ZN5Print5printEli+0x18>
    return write(n);
   d54ec:	6803      	ldr	r3, [r0, #0]
   d54ee:	b2c9      	uxtb	r1, r1
   d54f0:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d54f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d54f6:	4718      	bx	r3
  } else if (base == 10) {
   d54f8:	2a0a      	cmp	r2, #10
   d54fa:	d102      	bne.n	d5502 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d54fc:	2900      	cmp	r1, #0
   d54fe:	da01      	bge.n	d5504 <_ZN5Print5printEli+0x24>
   d5500:	e004      	b.n	d550c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5502:	b2d2      	uxtb	r2, r2
  }
}
   d5504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5508:	f7ff bfbb 	b.w	d5482 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d550c:	212d      	movs	r1, #45	; 0x2d
   d550e:	f7ff ff9f 	bl	d5450 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5512:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5514:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5516:	4271      	negs	r1, r6
   d5518:	4638      	mov	r0, r7
   d551a:	f7ff ffb2 	bl	d5482 <_ZN5Print11printNumberEmh>
   d551e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5524 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5524:	f7ff bfdc 	b.w	d54e0 <_ZN5Print5printEli>

000d5528 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5528:	b510      	push	{r4, lr}
   d552a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d552c:	f7ff fa49 	bl	d49c2 <_ZNSt14_Function_baseD1Ev>
   d5530:	4620      	mov	r0, r4
   d5532:	bd10      	pop	{r4, pc}

000d5534 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5534:	4803      	ldr	r0, [pc, #12]	; (d5544 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5536:	4a04      	ldr	r2, [pc, #16]	; (d5548 <_GLOBAL__sub_I_RGB+0x14>)
   d5538:	4904      	ldr	r1, [pc, #16]	; (d554c <_GLOBAL__sub_I_RGB+0x18>)
   d553a:	2300      	movs	r3, #0
   d553c:	6083      	str	r3, [r0, #8]
   d553e:	f000 ba83 	b.w	d5a48 <__aeabi_atexit>
   d5542:	bf00      	nop
   d5544:	2003e5bc 	.word	0x2003e5bc
   d5548:	2003e350 	.word	0x2003e350
   d554c:	000d5529 	.word	0x000d5529

000d5550 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5550:	4770      	bx	lr

000d5552 <_ZN8SPIClassD0Ev>:
   d5552:	b510      	push	{r4, lr}
   d5554:	2110      	movs	r1, #16
   d5556:	4604      	mov	r4, r0
   d5558:	f000 fa7b 	bl	d5a52 <_ZdlPvj>
   d555c:	4620      	mov	r0, r4
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5560:	b570      	push	{r4, r5, r6, lr}
   d5562:	4b08      	ldr	r3, [pc, #32]	; (d5584 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5564:	6003      	str	r3, [r0, #0]
   d5566:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5568:	2500      	movs	r5, #0
   d556a:	460e      	mov	r6, r1
   d556c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5570:	f7fe ffde 	bl	d4530 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5574:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5576:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5578:	f7ff f86a 	bl	d4650 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d557c:	60a5      	str	r5, [r4, #8]
}
   d557e:	4620      	mov	r0, r4
   d5580:	bd70      	pop	{r4, r5, r6, pc}
   d5582:	bf00      	nop
   d5584:	000d6094 	.word	0x000d6094

000d5588 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5588:	b510      	push	{r4, lr}
   d558a:	4604      	mov	r4, r0
{
	free(buffer);
   d558c:	6800      	ldr	r0, [r0, #0]
   d558e:	f7ff f97d 	bl	d488c <free>
}
   d5592:	4620      	mov	r0, r4
   d5594:	bd10      	pop	{r4, pc}

000d5596 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5596:	b510      	push	{r4, lr}
   d5598:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d559a:	6800      	ldr	r0, [r0, #0]
   d559c:	b108      	cbz	r0, d55a2 <_ZN6String10invalidateEv+0xc>
   d559e:	f7ff f975 	bl	d488c <free>
	buffer = NULL;
   d55a2:	2300      	movs	r3, #0
   d55a4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d55a6:	60a3      	str	r3, [r4, #8]
   d55a8:	6063      	str	r3, [r4, #4]
   d55aa:	bd10      	pop	{r4, pc}

000d55ac <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d55ac:	b538      	push	{r3, r4, r5, lr}
   d55ae:	4604      	mov	r4, r0
   d55b0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d55b2:	6800      	ldr	r0, [r0, #0]
   d55b4:	3101      	adds	r1, #1
   d55b6:	f7ff f971 	bl	d489c <realloc>
	if (newbuffer) {
   d55ba:	b110      	cbz	r0, d55c2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d55bc:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d55c0:	2001      	movs	r0, #1
	}
	return 0;
}
   d55c2:	bd38      	pop	{r3, r4, r5, pc}

000d55c4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55c4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d55c6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55c8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55ca:	b113      	cbz	r3, d55d2 <_ZN6String7reserveEj+0xe>
   d55cc:	6843      	ldr	r3, [r0, #4]
   d55ce:	428b      	cmp	r3, r1
   d55d0:	d207      	bcs.n	d55e2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55d2:	4620      	mov	r0, r4
   d55d4:	f7ff ffea 	bl	d55ac <_ZN6String12changeBufferEj>
   d55d8:	b120      	cbz	r0, d55e4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55da:	68a3      	ldr	r3, [r4, #8]
   d55dc:	b90b      	cbnz	r3, d55e2 <_ZN6String7reserveEj+0x1e>
   d55de:	6822      	ldr	r2, [r4, #0]
   d55e0:	7013      	strb	r3, [r2, #0]
   d55e2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55e4:	bd10      	pop	{r4, pc}

000d55e6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55e6:	b570      	push	{r4, r5, r6, lr}
   d55e8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55ea:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55ec:	4604      	mov	r4, r0
   d55ee:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d55f0:	f7ff ffe8 	bl	d55c4 <_ZN6String7reserveEj>
   d55f4:	b918      	cbnz	r0, d55fe <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d55f6:	4620      	mov	r0, r4
   d55f8:	f7ff ffcd 	bl	d5596 <_ZN6String10invalidateEv>
		return *this;
   d55fc:	e009      	b.n	d5612 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d55fe:	462a      	mov	r2, r5
   d5600:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5602:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5604:	6820      	ldr	r0, [r4, #0]
   d5606:	f000 fb7f 	bl	d5d08 <memcpy>
	buffer[len] = 0;
   d560a:	6822      	ldr	r2, [r4, #0]
   d560c:	68a3      	ldr	r3, [r4, #8]
   d560e:	2100      	movs	r1, #0
   d5610:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5612:	4620      	mov	r0, r4
   d5614:	bd70      	pop	{r4, r5, r6, pc}

000d5616 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5616:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5618:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d561a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d561c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d561e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5620:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5622:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5624:	460d      	mov	r5, r1
   d5626:	b139      	cbz	r1, d5638 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5628:	4608      	mov	r0, r1
   d562a:	f000 fbc4 	bl	d5db6 <strlen>
   d562e:	4629      	mov	r1, r5
   d5630:	4602      	mov	r2, r0
   d5632:	4620      	mov	r0, r4
   d5634:	f7ff ffd7 	bl	d55e6 <_ZN6String4copyEPKcj>
}
   d5638:	4620      	mov	r0, r4
   d563a:	bd38      	pop	{r3, r4, r5, pc}

000d563c <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d563c:	b510      	push	{r4, lr}
   d563e:	2400      	movs	r4, #0
   d5640:	7004      	strb	r4, [r0, #0]
   d5642:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d5644:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5646:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d564a:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d564c:	dd07      	ble.n	d565e <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d564e:	3901      	subs	r1, #1
   d5650:	4299      	cmp	r1, r3
   d5652:	d209      	bcs.n	d5668 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d5654:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d5658:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d565a:	2301      	movs	r3, #1
   d565c:	e001      	b.n	d5662 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d565e:	d102      	bne.n	d5666 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d5660:	2302      	movs	r3, #2
   d5662:	7003      	strb	r3, [r0, #0]
   d5664:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d5666:	8041      	strh	r1, [r0, #2]
    }
}
   d5668:	bd10      	pop	{r4, pc}
	...

000d566c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d566c:	b570      	push	{r4, r5, r6, lr}
   d566e:	b086      	sub	sp, #24
   d5670:	4616      	mov	r6, r2
   d5672:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5674:	2300      	movs	r3, #0
   d5676:	9302      	str	r3, [sp, #8]
   d5678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d567a:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d567c:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d567e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5680:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5682:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5686:	4631      	mov	r1, r6
   d5688:	4628      	mov	r0, r5
   d568a:	f7ff f88d 	bl	d47a8 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d568e:	4633      	mov	r3, r6
   d5690:	462a      	mov	r2, r5
   d5692:	4601      	mov	r1, r0
   d5694:	a804      	add	r0, sp, #16
   d5696:	f7ff ffd1 	bl	d563c <_ZN11SleepResultC1EiPKtj>
   d569a:	4b06      	ldr	r3, [pc, #24]	; (d56b4 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d569c:	9804      	ldr	r0, [sp, #16]
   d569e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d56a2:	6018      	str	r0, [r3, #0]
   d56a4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d56a6:	681a      	ldr	r2, [r3, #0]
   d56a8:	889b      	ldrh	r3, [r3, #4]
   d56aa:	6022      	str	r2, [r4, #0]
}
   d56ac:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d56ae:	80a3      	strh	r3, [r4, #4]
}
   d56b0:	b006      	add	sp, #24
   d56b2:	bd70      	pop	{r4, r5, r6, pc}
   d56b4:	2003e5cc 	.word	0x2003e5cc

000d56b8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d56b8:	4b04      	ldr	r3, [pc, #16]	; (d56cc <_GLOBAL__sub_I_System+0x14>)
   d56ba:	2000      	movs	r0, #0
   d56bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d56c0:	7018      	strb	r0, [r3, #0]
   d56c2:	8058      	strh	r0, [r3, #2]
   d56c4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d56c6:	f7ff b83b 	b.w	d4740 <set_system_mode>
   d56ca:	bf00      	nop
   d56cc:	2003e5cc 	.word	0x2003e5cc

000d56d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d56d0:	4b02      	ldr	r3, [pc, #8]	; (d56dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d56d6:	601a      	str	r2, [r3, #0]
   d56d8:	4770      	bx	lr
   d56da:	bf00      	nop
   d56dc:	2003e2e8 	.word	0x2003e2e8
   d56e0:	2003e5d4 	.word	0x2003e5d4

000d56e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d56e4:	4770      	bx	lr

000d56e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56e6:	7441      	strb	r1, [r0, #17]
   d56e8:	4770      	bx	lr

000d56ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d56ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7fe ffe7 	bl	d46c0 <HAL_USART_Available_Data_For_Write>
}
   d56f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56f6:	bd08      	pop	{r3, pc}

000d56f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d56f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d56fa:	7c00      	ldrb	r0, [r0, #16]
   d56fc:	f7fe ffc0 	bl	d4680 <HAL_USART_Available_Data>
}
   d5700:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5704:	bd08      	pop	{r3, pc}

000d5706 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5706:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5708:	7c00      	ldrb	r0, [r0, #16]
   d570a:	f7fe ffc9 	bl	d46a0 <HAL_USART_Peek_Data>
}
   d570e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5712:	bf28      	it	cs
   d5714:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5718:	bd08      	pop	{r3, pc}

000d571a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d571a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d571c:	7c00      	ldrb	r0, [r0, #16]
   d571e:	f7fe ffb7 	bl	d4690 <HAL_USART_Read_Data>
}
   d5722:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5726:	bf28      	it	cs
   d5728:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d572c:	bd08      	pop	{r3, pc}

000d572e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d572e:	7c00      	ldrb	r0, [r0, #16]
   d5730:	f7fe bfbe 	b.w	d46b0 <HAL_USART_Flush_Data>

000d5734 <_ZN11USARTSerialD0Ev>:
   d5734:	b510      	push	{r4, lr}
   d5736:	2114      	movs	r1, #20
   d5738:	4604      	mov	r4, r0
   d573a:	f000 f98a 	bl	d5a52 <_ZdlPvj>
   d573e:	4620      	mov	r0, r4
   d5740:	bd10      	pop	{r4, pc}

000d5742 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5742:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5744:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5746:	4604      	mov	r4, r0
   d5748:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d574a:	b925      	cbnz	r5, d5756 <_ZN11USARTSerial5writeEh+0x14>
   d574c:	7c00      	ldrb	r0, [r0, #16]
   d574e:	f7fe ffb7 	bl	d46c0 <HAL_USART_Available_Data_For_Write>
   d5752:	2800      	cmp	r0, #0
   d5754:	dd05      	ble.n	d5762 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5756:	4631      	mov	r1, r6
   d5758:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d575a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d575e:	f7fe bf87 	b.w	d4670 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5762:	4628      	mov	r0, r5
   d5764:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5768 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5768:	b510      	push	{r4, lr}
   d576a:	4604      	mov	r4, r0
   d576c:	4608      	mov	r0, r1
   d576e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5770:	2200      	movs	r2, #0
   d5772:	6062      	str	r2, [r4, #4]
   d5774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5778:	60a2      	str	r2, [r4, #8]
   d577a:	4a05      	ldr	r2, [pc, #20]	; (d5790 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d577c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d577e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5780:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5782:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5784:	461a      	mov	r2, r3
   d5786:	f7fe ff6b 	bl	d4660 <HAL_USART_Init>
}
   d578a:	4620      	mov	r0, r4
   d578c:	bd10      	pop	{r4, pc}
   d578e:	bf00      	nop
   d5790:	000d60d0 	.word	0x000d60d0

000d5794 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5794:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5796:	4d0c      	ldr	r5, [pc, #48]	; (d57c8 <_Z22__fetch_global_Serial1v+0x34>)
   d5798:	6829      	ldr	r1, [r5, #0]
   d579a:	f011 0401 	ands.w	r4, r1, #1
   d579e:	d111      	bne.n	d57c4 <_Z22__fetch_global_Serial1v+0x30>
   d57a0:	4628      	mov	r0, r5
   d57a2:	f7fe fc7e 	bl	d40a2 <__cxa_guard_acquire>
   d57a6:	b168      	cbz	r0, d57c4 <_Z22__fetch_global_Serial1v+0x30>
   d57a8:	4a08      	ldr	r2, [pc, #32]	; (d57cc <_Z22__fetch_global_Serial1v+0x38>)
   d57aa:	4b09      	ldr	r3, [pc, #36]	; (d57d0 <_Z22__fetch_global_Serial1v+0x3c>)
   d57ac:	4809      	ldr	r0, [pc, #36]	; (d57d4 <_Z22__fetch_global_Serial1v+0x40>)
   d57ae:	4621      	mov	r1, r4
   d57b0:	f7ff ffda 	bl	d5768 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d57b4:	4628      	mov	r0, r5
   d57b6:	f7fe fc79 	bl	d40ac <__cxa_guard_release>
   d57ba:	4a07      	ldr	r2, [pc, #28]	; (d57d8 <_Z22__fetch_global_Serial1v+0x44>)
   d57bc:	4907      	ldr	r1, [pc, #28]	; (d57dc <_Z22__fetch_global_Serial1v+0x48>)
   d57be:	4805      	ldr	r0, [pc, #20]	; (d57d4 <_Z22__fetch_global_Serial1v+0x40>)
   d57c0:	f000 f942 	bl	d5a48 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d57c4:	4803      	ldr	r0, [pc, #12]	; (d57d4 <_Z22__fetch_global_Serial1v+0x40>)
   d57c6:	bd38      	pop	{r3, r4, r5, pc}
   d57c8:	2003e670 	.word	0x2003e670
   d57cc:	2003e674 	.word	0x2003e674
   d57d0:	2003e5ec 	.word	0x2003e5ec
   d57d4:	2003e5d8 	.word	0x2003e5d8
   d57d8:	2003e350 	.word	0x2003e350
   d57dc:	000d56e5 	.word	0x000d56e5

000d57e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57e0:	7441      	strb	r1, [r0, #17]
   d57e2:	4770      	bx	lr

000d57e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d57e4:	4770      	bx	lr

000d57e6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d57e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d57e8:	2100      	movs	r1, #0
   d57ea:	7c00      	ldrb	r0, [r0, #16]
   d57ec:	f7fe ff90 	bl	d4710 <HAL_USB_USART_Receive_Data>
}
   d57f0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57f4:	bf28      	it	cs
   d57f6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d57fa:	bd08      	pop	{r3, pc}

000d57fc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d57fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d57fe:	2101      	movs	r1, #1
   d5800:	7c00      	ldrb	r0, [r0, #16]
   d5802:	f7fe ff85 	bl	d4710 <HAL_USB_USART_Receive_Data>
}
   d5806:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d580a:	bf28      	it	cs
   d580c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5810:	bd08      	pop	{r3, pc}

000d5812 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5812:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5814:	7c00      	ldrb	r0, [r0, #16]
   d5816:	f7fe ff73 	bl	d4700 <HAL_USB_USART_Available_Data_For_Write>
}
   d581a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d581e:	bd08      	pop	{r3, pc}

000d5820 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5820:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5822:	7c00      	ldrb	r0, [r0, #16]
   d5824:	f7fe ff64 	bl	d46f0 <HAL_USB_USART_Available_Data>
}
   d5828:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d582c:	bd08      	pop	{r3, pc}

000d582e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d582e:	7c00      	ldrb	r0, [r0, #16]
   d5830:	f7fe bf7e 	b.w	d4730 <HAL_USB_USART_Flush_Data>

000d5834 <_ZN9USBSerialD0Ev>:
   d5834:	b510      	push	{r4, lr}
   d5836:	2114      	movs	r1, #20
   d5838:	4604      	mov	r4, r0
   d583a:	f000 f90a 	bl	d5a52 <_ZdlPvj>
   d583e:	4620      	mov	r0, r4
   d5840:	bd10      	pop	{r4, pc}

000d5842 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5842:	b538      	push	{r3, r4, r5, lr}
   d5844:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5846:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5848:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d584a:	f7fe ff59 	bl	d4700 <HAL_USB_USART_Available_Data_For_Write>
   d584e:	2800      	cmp	r0, #0
   d5850:	dc01      	bgt.n	d5856 <_ZN9USBSerial5writeEh+0x14>
   d5852:	7c60      	ldrb	r0, [r4, #17]
   d5854:	b128      	cbz	r0, d5862 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5856:	4629      	mov	r1, r5
   d5858:	7c20      	ldrb	r0, [r4, #16]
   d585a:	f7fe ff61 	bl	d4720 <HAL_USB_USART_Send_Data>
   d585e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5862:	bd38      	pop	{r3, r4, r5, pc}

000d5864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5864:	b510      	push	{r4, lr}
   d5866:	4604      	mov	r4, r0
   d5868:	2300      	movs	r3, #0
   d586a:	6063      	str	r3, [r4, #4]
   d586c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5870:	60a3      	str	r3, [r4, #8]
   d5872:	4b05      	ldr	r3, [pc, #20]	; (d5888 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5874:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5876:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5878:	4608      	mov	r0, r1
{
  _serial = serial;
   d587a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d587c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d587e:	4611      	mov	r1, r2
   d5880:	f7fe ff26 	bl	d46d0 <HAL_USB_USART_Init>
}
   d5884:	4620      	mov	r0, r4
   d5886:	bd10      	pop	{r4, pc}
   d5888:	000d6100 	.word	0x000d6100

000d588c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d588c:	2200      	movs	r2, #0
   d588e:	7c00      	ldrb	r0, [r0, #16]
   d5890:	f7fe bf26 	b.w	d46e0 <HAL_USB_USART_Begin>

000d5894 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5894:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5896:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5898:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d589a:	2100      	movs	r1, #0
   d589c:	f000 fa3f 	bl	d5d1e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d58a0:	4620      	mov	r0, r4
   d58a2:	bd10      	pop	{r4, pc}

000d58a4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d58a4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58a6:	4d0e      	ldr	r5, [pc, #56]	; (d58e0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d58a8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d58aa:	a801      	add	r0, sp, #4
   d58ac:	f7ff fff2 	bl	d5894 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58b0:	6829      	ldr	r1, [r5, #0]
   d58b2:	f011 0401 	ands.w	r4, r1, #1
   d58b6:	d110      	bne.n	d58da <_Z16_fetch_usbserialv+0x36>
   d58b8:	4628      	mov	r0, r5
   d58ba:	f7fe fbf2 	bl	d40a2 <__cxa_guard_acquire>
   d58be:	b160      	cbz	r0, d58da <_Z16_fetch_usbserialv+0x36>
   d58c0:	aa01      	add	r2, sp, #4
   d58c2:	4621      	mov	r1, r4
   d58c4:	4807      	ldr	r0, [pc, #28]	; (d58e4 <_Z16_fetch_usbserialv+0x40>)
   d58c6:	f7ff ffcd 	bl	d5864 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d58ca:	4628      	mov	r0, r5
   d58cc:	f7fe fbee 	bl	d40ac <__cxa_guard_release>
   d58d0:	4a05      	ldr	r2, [pc, #20]	; (d58e8 <_Z16_fetch_usbserialv+0x44>)
   d58d2:	4906      	ldr	r1, [pc, #24]	; (d58ec <_Z16_fetch_usbserialv+0x48>)
   d58d4:	4803      	ldr	r0, [pc, #12]	; (d58e4 <_Z16_fetch_usbserialv+0x40>)
   d58d6:	f000 f8b7 	bl	d5a48 <__aeabi_atexit>
	return _usbserial;
}
   d58da:	4802      	ldr	r0, [pc, #8]	; (d58e4 <_Z16_fetch_usbserialv+0x40>)
   d58dc:	b007      	add	sp, #28
   d58de:	bd30      	pop	{r4, r5, pc}
   d58e0:	2003e6f8 	.word	0x2003e6f8
   d58e4:	2003e6fc 	.word	0x2003e6fc
   d58e8:	2003e350 	.word	0x2003e350
   d58ec:	000d57e5 	.word	0x000d57e5

000d58f0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d58f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d58f2:	4b0c      	ldr	r3, [pc, #48]	; (d5924 <serialEventRun+0x34>)
   d58f4:	b133      	cbz	r3, d5904 <serialEventRun+0x14>
   d58f6:	f7ff ffd5 	bl	d58a4 <_Z16_fetch_usbserialv>
   d58fa:	6803      	ldr	r3, [r0, #0]
   d58fc:	691b      	ldr	r3, [r3, #16]
   d58fe:	4798      	blx	r3
   d5900:	2800      	cmp	r0, #0
   d5902:	dc09      	bgt.n	d5918 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5904:	4b08      	ldr	r3, [pc, #32]	; (d5928 <serialEventRun+0x38>)
   d5906:	b163      	cbz	r3, d5922 <serialEventRun+0x32>
   d5908:	f7ff ff44 	bl	d5794 <_Z22__fetch_global_Serial1v>
   d590c:	6803      	ldr	r3, [r0, #0]
   d590e:	691b      	ldr	r3, [r3, #16]
   d5910:	4798      	blx	r3
   d5912:	2800      	cmp	r0, #0
   d5914:	dc03      	bgt.n	d591e <serialEventRun+0x2e>
   d5916:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5918:	f3af 8000 	nop.w
   d591c:	e7f2      	b.n	d5904 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d591e:	f3af 8000 	nop.w
   d5922:	bd08      	pop	{r3, pc}
	...

000d592c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d592c:	b508      	push	{r3, lr}
	serialEventRun();
   d592e:	f7ff ffdf 	bl	d58f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5932:	f7fe fe15 	bl	d4560 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5936:	4b01      	ldr	r3, [pc, #4]	; (d593c <_post_loop+0x10>)
   d5938:	6018      	str	r0, [r3, #0]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	2003e714 	.word	0x2003e714

000d5940 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5940:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5942:	2300      	movs	r3, #0
   d5944:	9300      	str	r3, [sp, #0]
   d5946:	461a      	mov	r2, r3
   d5948:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d594c:	f7fe ff22 	bl	d4794 <system_ctrl_set_result>
}
   d5950:	b003      	add	sp, #12
   d5952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5958 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5958:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d595a:	8843      	ldrh	r3, [r0, #2]
   d595c:	2b0a      	cmp	r3, #10
   d595e:	d008      	beq.n	d5972 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5960:	2b50      	cmp	r3, #80	; 0x50
   d5962:	d109      	bne.n	d5978 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5964:	4b09      	ldr	r3, [pc, #36]	; (d598c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5966:	681b      	ldr	r3, [r3, #0]
   d5968:	b13b      	cbz	r3, d597a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d596a:	b003      	add	sp, #12
   d596c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5970:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5972:	f7ff ffe5 	bl	d5940 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5976:	e006      	b.n	d5986 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5978:	2300      	movs	r3, #0
   d597a:	9300      	str	r3, [sp, #0]
   d597c:	461a      	mov	r2, r3
   d597e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5982:	f7fe ff07 	bl	d4794 <system_ctrl_set_result>
        break;
    }
}
   d5986:	b003      	add	sp, #12
   d5988:	f85d fb04 	ldr.w	pc, [sp], #4
   d598c:	2003e710 	.word	0x2003e710

000d5990 <module_user_init_hook>:

void module_user_init_hook()
{
   d5990:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5992:	f7fe fddd 	bl	d4550 <HAL_RNG_GetRandomNumber>
   d5996:	4604      	mov	r4, r0
    srand(seed);
   d5998:	f000 f9ca 	bl	d5d30 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d599c:	4b07      	ldr	r3, [pc, #28]	; (d59bc <module_user_init_hook+0x2c>)
   d599e:	b113      	cbz	r3, d59a6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d59a0:	4620      	mov	r0, r4
   d59a2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d59a6:	2100      	movs	r1, #0
   d59a8:	4804      	ldr	r0, [pc, #16]	; (d59bc <module_user_init_hook+0x2c>)
   d59aa:	f7fe ff0f 	bl	d47cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59ae:	2100      	movs	r1, #0
   d59b0:	4803      	ldr	r0, [pc, #12]	; (d59c0 <module_user_init_hook+0x30>)
}
   d59b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d59b6:	f7fe bee3 	b.w	d4780 <system_ctrl_set_app_request_handler>
   d59ba:	bf00      	nop
   d59bc:	00000000 	.word	0x00000000
   d59c0:	000d5959 	.word	0x000d5959

000d59c4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d59c4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d59c6:	4d0b      	ldr	r5, [pc, #44]	; (d59f4 <_Z19__fetch_global_Wirev+0x30>)
   d59c8:	6829      	ldr	r1, [r5, #0]
   d59ca:	f011 0401 	ands.w	r4, r1, #1
   d59ce:	d10f      	bne.n	d59f0 <_Z19__fetch_global_Wirev+0x2c>
   d59d0:	4628      	mov	r0, r5
   d59d2:	f7fe fb66 	bl	d40a2 <__cxa_guard_acquire>
   d59d6:	b158      	cbz	r0, d59f0 <_Z19__fetch_global_Wirev+0x2c>
   d59d8:	4621      	mov	r1, r4
   d59da:	4807      	ldr	r0, [pc, #28]	; (d59f8 <_Z19__fetch_global_Wirev+0x34>)
   d59dc:	f7ff fb0c 	bl	d4ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d59e0:	4628      	mov	r0, r5
   d59e2:	f7fe fb63 	bl	d40ac <__cxa_guard_release>
   d59e6:	4a05      	ldr	r2, [pc, #20]	; (d59fc <_Z19__fetch_global_Wirev+0x38>)
   d59e8:	4905      	ldr	r1, [pc, #20]	; (d5a00 <_Z19__fetch_global_Wirev+0x3c>)
   d59ea:	4803      	ldr	r0, [pc, #12]	; (d59f8 <_Z19__fetch_global_Wirev+0x34>)
   d59ec:	f000 f82c 	bl	d5a48 <__aeabi_atexit>
	return wire;
}
   d59f0:	4801      	ldr	r0, [pc, #4]	; (d59f8 <_Z19__fetch_global_Wirev+0x34>)
   d59f2:	bd38      	pop	{r3, r4, r5, pc}
   d59f4:	2003e718 	.word	0x2003e718
   d59f8:	2003e71c 	.word	0x2003e71c
   d59fc:	2003e350 	.word	0x2003e350
   d5a00:	000d4fa1 	.word	0x000d4fa1

000d5a04 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a04:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a06:	4c0c      	ldr	r4, [pc, #48]	; (d5a38 <_GLOBAL__sub_I_SPI+0x34>)
   d5a08:	4e0c      	ldr	r6, [pc, #48]	; (d5a3c <_GLOBAL__sub_I_SPI+0x38>)
   d5a0a:	4d0d      	ldr	r5, [pc, #52]	; (d5a40 <_GLOBAL__sub_I_SPI+0x3c>)
   d5a0c:	2100      	movs	r1, #0
   d5a0e:	4620      	mov	r0, r4
   d5a10:	f7ff fda6 	bl	d5560 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a14:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a16:	4c0b      	ldr	r4, [pc, #44]	; (d5a44 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5a18:	4632      	mov	r2, r6
   d5a1a:	4629      	mov	r1, r5
   d5a1c:	f000 f814 	bl	d5a48 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5a20:	2101      	movs	r1, #1
   d5a22:	4620      	mov	r0, r4
   d5a24:	f7ff fd9c 	bl	d5560 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5a28:	4632      	mov	r2, r6
   d5a2a:	4629      	mov	r1, r5
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5a32:	f000 b809 	b.w	d5a48 <__aeabi_atexit>
   d5a36:	bf00      	nop
   d5a38:	2003e730 	.word	0x2003e730
   d5a3c:	2003e350 	.word	0x2003e350
   d5a40:	000d5551 	.word	0x000d5551
   d5a44:	2003e740 	.word	0x2003e740

000d5a48 <__aeabi_atexit>:
   d5a48:	460b      	mov	r3, r1
   d5a4a:	4601      	mov	r1, r0
   d5a4c:	4618      	mov	r0, r3
   d5a4e:	f000 b94d 	b.w	d5cec <__cxa_atexit>

000d5a52 <_ZdlPvj>:
   d5a52:	f7fe bb22 	b.w	d409a <_ZdlPv>

000d5a56 <_ZSt25__throw_bad_function_callv>:
   d5a56:	b508      	push	{r3, lr}
   d5a58:	f7fe ff28 	bl	d48ac <abort>

000d5a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5a5c:	4b24      	ldr	r3, [pc, #144]	; (d5af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d0      	lsls	r0, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b22      	ldr	r3, [pc, #136]	; (d5af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d1      	lsls	r1, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b20      	ldr	r3, [pc, #128]	; (d5af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d2      	lsls	r2, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b1e      	ldr	r3, [pc, #120]	; (d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d0      	lsls	r0, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b1c      	ldr	r3, [pc, #112]	; (d5b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d1      	lsls	r1, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b1a      	ldr	r3, [pc, #104]	; (d5b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d2      	lsls	r2, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b18      	ldr	r3, [pc, #96]	; (d5b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d0      	lsls	r0, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4b16      	ldr	r3, [pc, #88]	; (d5b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5ab2:	681a      	ldr	r2, [r3, #0]
   d5ab4:	07d1      	lsls	r1, r2, #31
   d5ab6:	bf5c      	itt	pl
   d5ab8:	2201      	movpl	r2, #1
   d5aba:	601a      	strpl	r2, [r3, #0]
   d5abc:	4b14      	ldr	r3, [pc, #80]	; (d5b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5abe:	681a      	ldr	r2, [r3, #0]
   d5ac0:	07d2      	lsls	r2, r2, #31
   d5ac2:	bf5c      	itt	pl
   d5ac4:	2201      	movpl	r2, #1
   d5ac6:	601a      	strpl	r2, [r3, #0]
   d5ac8:	4b12      	ldr	r3, [pc, #72]	; (d5b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5aca:	681a      	ldr	r2, [r3, #0]
   d5acc:	07d0      	lsls	r0, r2, #31
   d5ace:	bf5c      	itt	pl
   d5ad0:	2201      	movpl	r2, #1
   d5ad2:	601a      	strpl	r2, [r3, #0]
   d5ad4:	4b10      	ldr	r3, [pc, #64]	; (d5b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5ad6:	681a      	ldr	r2, [r3, #0]
   d5ad8:	07d1      	lsls	r1, r2, #31
   d5ada:	bf5c      	itt	pl
   d5adc:	2201      	movpl	r2, #1
   d5ade:	601a      	strpl	r2, [r3, #0]
   d5ae0:	4b0e      	ldr	r3, [pc, #56]	; (d5b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5ae2:	681a      	ldr	r2, [r3, #0]
   d5ae4:	07d2      	lsls	r2, r2, #31
   d5ae6:	bf5c      	itt	pl
   d5ae8:	2201      	movpl	r2, #1
   d5aea:	601a      	strpl	r2, [r3, #0]
   d5aec:	4770      	bx	lr
   d5aee:	bf00      	nop
   d5af0:	2003e77c 	.word	0x2003e77c
   d5af4:	2003e778 	.word	0x2003e778
   d5af8:	2003e774 	.word	0x2003e774
   d5afc:	2003e770 	.word	0x2003e770
   d5b00:	2003e76c 	.word	0x2003e76c
   d5b04:	2003e768 	.word	0x2003e768
   d5b08:	2003e764 	.word	0x2003e764
   d5b0c:	2003e760 	.word	0x2003e760
   d5b10:	2003e75c 	.word	0x2003e75c
   d5b14:	2003e758 	.word	0x2003e758
   d5b18:	2003e754 	.word	0x2003e754
   d5b1c:	2003e750 	.word	0x2003e750

000d5b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b20:	4b18      	ldr	r3, [pc, #96]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d1      	lsls	r1, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b16      	ldr	r3, [pc, #88]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d2      	lsls	r2, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b14      	ldr	r3, [pc, #80]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d0      	lsls	r0, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b12      	ldr	r3, [pc, #72]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d1      	lsls	r1, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b10      	ldr	r3, [pc, #64]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d2      	lsls	r2, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b0e      	ldr	r3, [pc, #56]	; (d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d0      	lsls	r0, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b0c      	ldr	r3, [pc, #48]	; (d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d1      	lsls	r1, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4b0a      	ldr	r3, [pc, #40]	; (d5ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b76:	681a      	ldr	r2, [r3, #0]
   d5b78:	07d2      	lsls	r2, r2, #31
   d5b7a:	bf5c      	itt	pl
   d5b7c:	2201      	movpl	r2, #1
   d5b7e:	601a      	strpl	r2, [r3, #0]
   d5b80:	4770      	bx	lr
   d5b82:	bf00      	nop
   d5b84:	2003e79c 	.word	0x2003e79c
   d5b88:	2003e798 	.word	0x2003e798
   d5b8c:	2003e794 	.word	0x2003e794
   d5b90:	2003e790 	.word	0x2003e790
   d5b94:	2003e78c 	.word	0x2003e78c
   d5b98:	2003e788 	.word	0x2003e788
   d5b9c:	2003e784 	.word	0x2003e784
   d5ba0:	2003e780 	.word	0x2003e780

000d5ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ba4:	4b18      	ldr	r3, [pc, #96]	; (d5c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d1      	lsls	r1, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4b16      	ldr	r3, [pc, #88]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5bb2:	681a      	ldr	r2, [r3, #0]
   d5bb4:	07d2      	lsls	r2, r2, #31
   d5bb6:	bf5c      	itt	pl
   d5bb8:	2201      	movpl	r2, #1
   d5bba:	601a      	strpl	r2, [r3, #0]
   d5bbc:	4b14      	ldr	r3, [pc, #80]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d0      	lsls	r0, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b12      	ldr	r3, [pc, #72]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d1      	lsls	r1, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4b10      	ldr	r3, [pc, #64]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	07d2      	lsls	r2, r2, #31
   d5bda:	bf5c      	itt	pl
   d5bdc:	2201      	movpl	r2, #1
   d5bde:	601a      	strpl	r2, [r3, #0]
   d5be0:	4b0e      	ldr	r3, [pc, #56]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	07d0      	lsls	r0, r2, #31
   d5be6:	bf5c      	itt	pl
   d5be8:	2201      	movpl	r2, #1
   d5bea:	601a      	strpl	r2, [r3, #0]
   d5bec:	4b0c      	ldr	r3, [pc, #48]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d1      	lsls	r1, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4b0a      	ldr	r3, [pc, #40]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	07d2      	lsls	r2, r2, #31
   d5bfe:	bf5c      	itt	pl
   d5c00:	2201      	movpl	r2, #1
   d5c02:	601a      	strpl	r2, [r3, #0]
   d5c04:	4770      	bx	lr
   d5c06:	bf00      	nop
   d5c08:	2003e7bc 	.word	0x2003e7bc
   d5c0c:	2003e7b8 	.word	0x2003e7b8
   d5c10:	2003e7b4 	.word	0x2003e7b4
   d5c14:	2003e7b0 	.word	0x2003e7b0
   d5c18:	2003e7ac 	.word	0x2003e7ac
   d5c1c:	2003e7a8 	.word	0x2003e7a8
   d5c20:	2003e7a4 	.word	0x2003e7a4
   d5c24:	2003e7a0 	.word	0x2003e7a0

000d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c28:	4b24      	ldr	r3, [pc, #144]	; (d5cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c2a:	681a      	ldr	r2, [r3, #0]
   d5c2c:	07d0      	lsls	r0, r2, #31
   d5c2e:	bf5c      	itt	pl
   d5c30:	2201      	movpl	r2, #1
   d5c32:	601a      	strpl	r2, [r3, #0]
   d5c34:	4b22      	ldr	r3, [pc, #136]	; (d5cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5c36:	681a      	ldr	r2, [r3, #0]
   d5c38:	07d1      	lsls	r1, r2, #31
   d5c3a:	bf5c      	itt	pl
   d5c3c:	2201      	movpl	r2, #1
   d5c3e:	601a      	strpl	r2, [r3, #0]
   d5c40:	4b20      	ldr	r3, [pc, #128]	; (d5cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5c42:	681a      	ldr	r2, [r3, #0]
   d5c44:	07d2      	lsls	r2, r2, #31
   d5c46:	bf5c      	itt	pl
   d5c48:	2201      	movpl	r2, #1
   d5c4a:	601a      	strpl	r2, [r3, #0]
   d5c4c:	4b1e      	ldr	r3, [pc, #120]	; (d5cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c4e:	681a      	ldr	r2, [r3, #0]
   d5c50:	07d0      	lsls	r0, r2, #31
   d5c52:	bf5c      	itt	pl
   d5c54:	2201      	movpl	r2, #1
   d5c56:	601a      	strpl	r2, [r3, #0]
   d5c58:	4b1c      	ldr	r3, [pc, #112]	; (d5ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c5a:	681a      	ldr	r2, [r3, #0]
   d5c5c:	07d1      	lsls	r1, r2, #31
   d5c5e:	bf5c      	itt	pl
   d5c60:	2201      	movpl	r2, #1
   d5c62:	601a      	strpl	r2, [r3, #0]
   d5c64:	4b1a      	ldr	r3, [pc, #104]	; (d5cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c66:	681a      	ldr	r2, [r3, #0]
   d5c68:	07d2      	lsls	r2, r2, #31
   d5c6a:	bf5c      	itt	pl
   d5c6c:	2201      	movpl	r2, #1
   d5c6e:	601a      	strpl	r2, [r3, #0]
   d5c70:	4b18      	ldr	r3, [pc, #96]	; (d5cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5c72:	681a      	ldr	r2, [r3, #0]
   d5c74:	07d0      	lsls	r0, r2, #31
   d5c76:	bf5c      	itt	pl
   d5c78:	2201      	movpl	r2, #1
   d5c7a:	601a      	strpl	r2, [r3, #0]
   d5c7c:	4b16      	ldr	r3, [pc, #88]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5c7e:	681a      	ldr	r2, [r3, #0]
   d5c80:	07d1      	lsls	r1, r2, #31
   d5c82:	bf5c      	itt	pl
   d5c84:	2201      	movpl	r2, #1
   d5c86:	601a      	strpl	r2, [r3, #0]
   d5c88:	4b14      	ldr	r3, [pc, #80]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5c8a:	681a      	ldr	r2, [r3, #0]
   d5c8c:	07d2      	lsls	r2, r2, #31
   d5c8e:	bf5c      	itt	pl
   d5c90:	2201      	movpl	r2, #1
   d5c92:	601a      	strpl	r2, [r3, #0]
   d5c94:	4b12      	ldr	r3, [pc, #72]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5c96:	681a      	ldr	r2, [r3, #0]
   d5c98:	07d0      	lsls	r0, r2, #31
   d5c9a:	bf5c      	itt	pl
   d5c9c:	2201      	movpl	r2, #1
   d5c9e:	601a      	strpl	r2, [r3, #0]
   d5ca0:	4b10      	ldr	r3, [pc, #64]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	07d1      	lsls	r1, r2, #31
   d5ca6:	bf5c      	itt	pl
   d5ca8:	2201      	movpl	r2, #1
   d5caa:	601a      	strpl	r2, [r3, #0]
   d5cac:	4b0e      	ldr	r3, [pc, #56]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	07d2      	lsls	r2, r2, #31
   d5cb2:	bf5c      	itt	pl
   d5cb4:	2201      	movpl	r2, #1
   d5cb6:	601a      	strpl	r2, [r3, #0]
   d5cb8:	4770      	bx	lr
   d5cba:	bf00      	nop
   d5cbc:	2003e7ec 	.word	0x2003e7ec
   d5cc0:	2003e7e8 	.word	0x2003e7e8
   d5cc4:	2003e7e4 	.word	0x2003e7e4
   d5cc8:	2003e7e0 	.word	0x2003e7e0
   d5ccc:	2003e7dc 	.word	0x2003e7dc
   d5cd0:	2003e7d8 	.word	0x2003e7d8
   d5cd4:	2003e7d4 	.word	0x2003e7d4
   d5cd8:	2003e7d0 	.word	0x2003e7d0
   d5cdc:	2003e7cc 	.word	0x2003e7cc
   d5ce0:	2003e7c8 	.word	0x2003e7c8
   d5ce4:	2003e7c4 	.word	0x2003e7c4
   d5ce8:	2003e7c0 	.word	0x2003e7c0

000d5cec <__cxa_atexit>:
   d5cec:	b510      	push	{r4, lr}
   d5cee:	4c05      	ldr	r4, [pc, #20]	; (d5d04 <__cxa_atexit+0x18>)
   d5cf0:	4613      	mov	r3, r2
   d5cf2:	b12c      	cbz	r4, d5d00 <__cxa_atexit+0x14>
   d5cf4:	460a      	mov	r2, r1
   d5cf6:	4601      	mov	r1, r0
   d5cf8:	2002      	movs	r0, #2
   d5cfa:	f3af 8000 	nop.w
   d5cfe:	bd10      	pop	{r4, pc}
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd10      	pop	{r4, pc}
   d5d04:	00000000 	.word	0x00000000

000d5d08 <memcpy>:
   d5d08:	b510      	push	{r4, lr}
   d5d0a:	1e43      	subs	r3, r0, #1
   d5d0c:	440a      	add	r2, r1
   d5d0e:	4291      	cmp	r1, r2
   d5d10:	d004      	beq.n	d5d1c <memcpy+0x14>
   d5d12:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5d16:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5d1a:	e7f8      	b.n	d5d0e <memcpy+0x6>
   d5d1c:	bd10      	pop	{r4, pc}

000d5d1e <memset>:
   d5d1e:	4402      	add	r2, r0
   d5d20:	4603      	mov	r3, r0
   d5d22:	4293      	cmp	r3, r2
   d5d24:	d002      	beq.n	d5d2c <memset+0xe>
   d5d26:	f803 1b01 	strb.w	r1, [r3], #1
   d5d2a:	e7fa      	b.n	d5d22 <memset+0x4>
   d5d2c:	4770      	bx	lr
	...

000d5d30 <srand>:
   d5d30:	b538      	push	{r3, r4, r5, lr}
   d5d32:	4b12      	ldr	r3, [pc, #72]	; (d5d7c <srand+0x4c>)
   d5d34:	681c      	ldr	r4, [r3, #0]
   d5d36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5d38:	4605      	mov	r5, r0
   d5d3a:	b9d3      	cbnz	r3, d5d72 <srand+0x42>
   d5d3c:	2018      	movs	r0, #24
   d5d3e:	f7fe fd9d 	bl	d487c <malloc>
   d5d42:	f243 330e 	movw	r3, #13070	; 0x330e
   d5d46:	63a0      	str	r0, [r4, #56]	; 0x38
   d5d48:	8003      	strh	r3, [r0, #0]
   d5d4a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5d4e:	8043      	strh	r3, [r0, #2]
   d5d50:	f241 2334 	movw	r3, #4660	; 0x1234
   d5d54:	8083      	strh	r3, [r0, #4]
   d5d56:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5d5a:	80c3      	strh	r3, [r0, #6]
   d5d5c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5d60:	8103      	strh	r3, [r0, #8]
   d5d62:	2305      	movs	r3, #5
   d5d64:	8143      	strh	r3, [r0, #10]
   d5d66:	230b      	movs	r3, #11
   d5d68:	8183      	strh	r3, [r0, #12]
   d5d6a:	2201      	movs	r2, #1
   d5d6c:	2300      	movs	r3, #0
   d5d6e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5d72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5d74:	2200      	movs	r2, #0
   d5d76:	611d      	str	r5, [r3, #16]
   d5d78:	615a      	str	r2, [r3, #20]
   d5d7a:	bd38      	pop	{r3, r4, r5, pc}
   d5d7c:	2003e34c 	.word	0x2003e34c

000d5d80 <strdup>:
   d5d80:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <strdup+0xc>)
   d5d82:	4601      	mov	r1, r0
   d5d84:	6818      	ldr	r0, [r3, #0]
   d5d86:	f000 b803 	b.w	d5d90 <_strdup_r>
   d5d8a:	bf00      	nop
   d5d8c:	2003e34c 	.word	0x2003e34c

000d5d90 <_strdup_r>:
   d5d90:	b570      	push	{r4, r5, r6, lr}
   d5d92:	4606      	mov	r6, r0
   d5d94:	4608      	mov	r0, r1
   d5d96:	460c      	mov	r4, r1
   d5d98:	f000 f80d 	bl	d5db6 <strlen>
   d5d9c:	1c45      	adds	r5, r0, #1
   d5d9e:	4629      	mov	r1, r5
   d5da0:	4630      	mov	r0, r6
   d5da2:	f7fe fd8b 	bl	d48bc <_malloc_r>
   d5da6:	4606      	mov	r6, r0
   d5da8:	b118      	cbz	r0, d5db2 <_strdup_r+0x22>
   d5daa:	462a      	mov	r2, r5
   d5dac:	4621      	mov	r1, r4
   d5dae:	f7ff ffab 	bl	d5d08 <memcpy>
   d5db2:	4630      	mov	r0, r6
   d5db4:	bd70      	pop	{r4, r5, r6, pc}

000d5db6 <strlen>:
   d5db6:	4603      	mov	r3, r0
   d5db8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5dbc:	2a00      	cmp	r2, #0
   d5dbe:	d1fb      	bne.n	d5db8 <strlen+0x2>
   d5dc0:	1a18      	subs	r0, r3, r0
   d5dc2:	3801      	subs	r0, #1
   d5dc4:	4770      	bx	lr

000d5dc6 <strncpy>:
   d5dc6:	b510      	push	{r4, lr}
   d5dc8:	4603      	mov	r3, r0
   d5dca:	b142      	cbz	r2, d5dde <strncpy+0x18>
   d5dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5dd0:	f803 4b01 	strb.w	r4, [r3], #1
   d5dd4:	3a01      	subs	r2, #1
   d5dd6:	2c00      	cmp	r4, #0
   d5dd8:	d1f7      	bne.n	d5dca <strncpy+0x4>
   d5dda:	441a      	add	r2, r3
   d5ddc:	e000      	b.n	d5de0 <strncpy+0x1a>
   d5dde:	bd10      	pop	{r4, pc}
   d5de0:	4293      	cmp	r3, r2
   d5de2:	d002      	beq.n	d5dea <strncpy+0x24>
   d5de4:	f803 4b01 	strb.w	r4, [r3], #1
   d5de8:	e7fa      	b.n	d5de0 <strncpy+0x1a>
   d5dea:	bd10      	pop	{r4, pc}

000d5dec <dynalib_user>:
   d5dec:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5dfc:	0000 0000 6f43 6c75 6e64 2074 7473 7261     ....Couldnt star
   d5e0c:	0074 4d4d 3841 3534 2031 6f66 6e75 2164     t.MMA8451 found!
   d5e1c:	5200 6e61 6567 3d20 0020 0047 7564 706d     .Range = .G.dump
   d5e2c:	7473 7265 7320 7265 6976 6563 6520 6576     ster service eve
   d5e3c:	746e 6320 6e6f 6966 6d72 6465 6400 6d75     nt confirmed.dum
   d5e4c:	7370 6574 2d72 6c66 7069 6570 0064 0000     pster-flipped...

000d5e5c <_ZTV16Adafruit_MMA8451>:
	...
   d5e64:	40b5 000d 41c9 000d 40b3 000d 44a5 000d     .@...A...@...D..
   d5e74:	422d 000d 4d4d 3841 3534 0031               -B..MMA8451.

000d5e80 <_ZTVN5spark13CellularClassE>:
	...
   d5e88:	4959 000d 494f 000d 4945 000d 48fb 000d     YI..OI..EI...H..
   d5e98:	4939 000d 492d 000d 4921 000d 4919 000d     9I..-I..!I...I..
   d5ea8:	490f 000d 4905 000d 531d 000d               .I...I...S..

000d5eb4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5ebc:	49a5 000d 49ab 000d 49d5 000d 49b9 000d     .I...I...I...I..
   d5ecc:	49a7 000d                                   .I..

000d5ed0 <_ZTVN5spark13EthernetClassE>:
	...
   d5ed8:	4f83 000d 4f79 000d 4f6f 000d 4f65 000d     .O..yO..oO..eO..
   d5ee8:	4f59 000d 4f4d 000d 4f41 000d 4f39 000d     YO..MO..AO..9O..
   d5ef8:	4f2f 000d 4f25 000d 531d 000d               /O..%O...S..

000d5f04 <_ZTV7TwoWire>:
	...
   d5f0c:	4fa1 000d 4feb 000d 4fc3 000d 4fa3 000d     .O...O...O...O..
   d5f1c:	4fcb 000d 4fd3 000d 4fdb 000d 4fe3 000d     .O...O...O...O..

000d5f2c <_ZTV9IPAddress>:
	...
   d5f34:	5071 000d 5061 000d 5063 000d 0066 6e6c     qP..aP..cP..f.ln
   d5f44:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d5f54:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d5f64:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5f74:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5f84:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d5f94:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d5fa4:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d5fb4:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d5fc4:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d5fd4:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d5fe4:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d5ff4:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d6004:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d6014:	726f 7000 6e61 6369 6100 6c6c 0000 0000     or.panic.all....

000d6024 <_ZTVN5spark9MeshClassE>:
	...
   d602c:	51b3 000d 51a9 000d 519f 000d 5195 000d     .Q...Q...Q...Q..
   d603c:	5189 000d 517d 000d 5171 000d 5169 000d     .Q..}Q..qQ..iQ..
   d604c:	515f 000d 5155 000d 531d 000d               _Q..UQ...S..

000d6058 <_ZTVN5spark12NetworkClassE>:
	...
   d6060:	52b5 000d 52bf 000d 52c9 000d 52d3 000d     .R...R...R...R..
   d6070:	52dd 000d 52e9 000d 52f5 000d 5301 000d     .R...R...R...S..
   d6080:	5309 000d 5313 000d 531d 000d               .S...S...S..

000d608c <_ZTV8SPIClass>:
	...
   d6094:	5551 000d 5553 000d 005a 2b25 3330 3a64     QU..SU..Z.%+03d:
   d60a4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d60b4:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d60c4:	0000 0000                                   ....

000d60c8 <_ZTV11USARTSerial>:
	...
   d60d0:	56e5 000d 5735 000d 5743 000d 53fd 000d     .V..5W..CW...S..
   d60e0:	56f9 000d 571b 000d 5707 000d 572f 000d     .V...W...W../W..
   d60f0:	56e7 000d 56eb 000d                         .V...V..

000d60f8 <_ZTV9USBSerial>:
	...
   d6100:	57e5 000d 5835 000d 5843 000d 53fd 000d     .W..5X..CX...S..
   d6110:	5821 000d 57e7 000d 57fd 000d 582f 000d     !X...W...W../X..
   d6120:	5813 000d 57e1 000d                         .X...W..

000d6128 <__sf_fake_stdin>:
	...

000d6148 <__sf_fake_stdout>:
	...

000d6168 <__sf_fake_stderr>:
	...
   d6188:	0043                                        C.

000d618a <link_const_variable_data_end>:
	...

000d618c <link_constructors_location>:
   d618c:	000d41d9 	.word	0x000d41d9
   d6190:	000d44fd 	.word	0x000d44fd
   d6194:	000d4965 	.word	0x000d4965
   d6198:	000d4f8d 	.word	0x000d4f8d
   d619c:	000d5145 	.word	0x000d5145
   d61a0:	000d5269 	.word	0x000d5269
   d61a4:	000d53e9 	.word	0x000d53e9
   d61a8:	000d5535 	.word	0x000d5535
   d61ac:	000d56b9 	.word	0x000d56b9
   d61b0:	000d56d1 	.word	0x000d56d1
   d61b4:	000d5a05 	.word	0x000d5a05
   d61b8:	000d5a5d 	.word	0x000d5a5d
   d61bc:	000d5b21 	.word	0x000d5b21
   d61c0:	000d5ba5 	.word	0x000d5ba5
   d61c4:	000d5c29 	.word	0x000d5c29

000d61c8 <link_constructors_end>:
	...
